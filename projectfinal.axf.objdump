
W:/projectfinal/projectfinal.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	bc 0c 00 00 c0 0c 00 00 c4 0c 00 00 c8 0c 00 00     ................
  30:	cc 0c 00 00 c8 18 00 00 44 13 00 00 d0 0c 00 00     ........D.......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0005e2 	bl	1864 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000019b0 	.word	0x000019b0

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001de8 	.word	0x00001de8

00000124 <__cs3_heap_start_ptr>:
     124:	00001e18 	.word	0x00001e18

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001df0 	.word	0x00001df0
     170:	00001df3 	.word	0x00001df3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001df0 	.word	0x00001df0
     1bc:	00001df0 	.word	0x00001df0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001df0 	.word	0x00001df0
     200:	00000000 	.word	0x00000000
     204:	00001954 	.word	0x00001954

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001954 	.word	0x00001954
     250:	00001df4 	.word	0x00001df4
     254:	000019b0 	.word	0x000019b0
     258:	00000000 	.word	0x00000000

0000025c <wait_for_vsync>:

// code for subroutines (not shown)
void wait_for_vsync(){
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    register int status;
    *pixel_ctrl_ptr = 1; //start the synchronization process
     25c:	e3033fff 	movw	r3, #16383	; 0x3fff
     260:	e34f3f20 	movt	r3, #65312	; 0xff20
     264:	e3a02001 	mov	r2, #1
     268:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
    status = *(pixel_ctrl_ptr + 3);
     26c:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
    while((status & 0x01 ) != 0){
     270:	e3130001 	tst	r3, #1
     274:	012fff1e 	bxeq	lr
        status = *(pixel_ctrl_ptr + 3);
     278:	e3032fff 	movw	r2, #16383	; 0x3fff
     27c:	e34f2f20 	movt	r2, #65312	; 0xff20
     280:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
void wait_for_vsync(){
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    register int status;
    *pixel_ctrl_ptr = 1; //start the synchronization process
    status = *(pixel_ctrl_ptr + 3);
    while((status & 0x01 ) != 0){
     284:	e3130001 	tst	r3, #1
     288:	1afffffc 	bne	280 <wait_for_vsync+0x24>
     28c:	e12fff1e 	bx	lr

00000290 <plot_pixel>:
    }
}

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     290:	e3013e0c 	movw	r3, #7692	; 0x1e0c
     294:	e3403000 	movt	r3, #0
     298:	e5933000 	ldr	r3, [r3]
     29c:	e1a00080 	lsl	r0, r0, #1
     2a0:	e0831501 	add	r1, r3, r1, lsl #10
     2a4:	e18120b0 	strh	r2, [r1, r0]
     2a8:	e12fff1e 	bx	lr

000002ac <swap>:
}

void swap(int *xp, int *yp)
{
    int temp = *xp;
     2ac:	e5903000 	ldr	r3, [r0]
    *xp = *yp;
     2b0:	e5912000 	ldr	r2, [r1]
     2b4:	e5802000 	str	r2, [r0]
    *yp = temp;
     2b8:	e5813000 	str	r3, [r1]
     2bc:	e12fff1e 	bx	lr

000002c0 <move_blob>:
}

int move_blob(int *blob_x, int *blob_y, int count, int decr) {
	*blob_y -= decr;
     2c0:	e5910000 	ldr	r0, [r1]
     2c4:	e0633000 	rsb	r3, r3, r0
     2c8:	e5813000 	str	r3, [r1]
	//plot_pixel(*blob_x, *blob_y, 0xFF0000);
	count++;
	return count;
}
     2cc:	e2820001 	add	r0, r2, #1
     2d0:	e12fff1e 	bx	lr

000002d4 <move_blob_left>:

void move_blob_left(int *blob_x, int *blob_y) {
	*blob_x -= 3;
     2d4:	e5903000 	ldr	r3, [r0]
     2d8:	e2433003 	sub	r3, r3, #3
     2dc:	e5803000 	str	r3, [r0]
     2e0:	e12fff1e 	bx	lr

000002e4 <move_blob_right>:
	return;
}

void move_blob_right(int *blob_x, int *blob_y) {
	*blob_x += 3;
     2e4:	e5903000 	ldr	r3, [r0]
     2e8:	e2833003 	add	r3, r3, #3
     2ec:	e5803000 	str	r3, [r0]
     2f0:	e12fff1e 	bx	lr

000002f4 <move_blob_left_more>:
	return;
}

void move_blob_left_more(int *blob_x, int *blob_y) {
	*blob_x -= 8;
     2f4:	e5903000 	ldr	r3, [r0]
     2f8:	e2433008 	sub	r3, r3, #8
     2fc:	e5803000 	str	r3, [r0]
     300:	e12fff1e 	bx	lr

00000304 <move_blob_right_more>:
	return;
}

void move_blob_right_more(int *blob_x, int *blob_y) {
	*blob_x += 8;
     304:	e5903000 	ldr	r3, [r0]
     308:	e2833008 	add	r3, r3, #8
     30c:	e5803000 	str	r3, [r0]
     310:	e12fff1e 	bx	lr

00000314 <draw_blob>:
	return;
}

//code for drawing the blob
void draw_blob(int x, int y, int color) {
     314:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     318:	e24dd014 	sub	sp, sp, #20
     31c:	e1a0a000 	mov	r10, r0
     320:	e1a06001 	mov	r6, r1
    //    plot_pixel(x+2, y+2, color);
    //    plot_pixel(x+2, y+1, color);
    //    plot_pixel(x+1, y+2, color);
    
    //draw the semicircle part
    plot_pixel(x+4, y, color);
     324:	e6ff2072 	uxth	r2, r2
     328:	e58d2004 	str	r2, [sp, #4]
     32c:	e6bf4072 	sxth	r4, r2
     330:	e2800004 	add	r0, r0, #4
     334:	e1a02004 	mov	r2, r4
     338:	ebffffd4 	bl	290 <plot_pixel>
    plot_pixel(x+5, y, color);
     33c:	e28a0005 	add	r0, r10, #5
     340:	e1a01006 	mov	r1, r6
     344:	e1a02004 	mov	r2, r4
     348:	ebffffd0 	bl	290 <plot_pixel>
    plot_pixel(x+2, y+1, color);
     34c:	e2865001 	add	r5, r6, #1
     350:	e28a0002 	add	r0, r10, #2
     354:	e1a01005 	mov	r1, r5
     358:	e1a02004 	mov	r2, r4
     35c:	ebffffcb 	bl	290 <plot_pixel>
    plot_pixel(x+3, y+1, color);
     360:	e28a0003 	add	r0, r10, #3
     364:	e1a01005 	mov	r1, r5
     368:	e1a02004 	mov	r2, r4
     36c:	ebffffc7 	bl	290 <plot_pixel>
    plot_pixel(x+6, y+1, color);
     370:	e28a0006 	add	r0, r10, #6
     374:	e1a01005 	mov	r1, r5
     378:	e1a02004 	mov	r2, r4
     37c:	ebffffc3 	bl	290 <plot_pixel>
    plot_pixel(x+7, y+1, color);
     380:	e28a0007 	add	r0, r10, #7
     384:	e1a01005 	mov	r1, r5
     388:	e1a02004 	mov	r2, r4
     38c:	ebffffbf 	bl	290 <plot_pixel>
    plot_pixel(x, y+2, color);
     390:	e2865002 	add	r5, r6, #2
     394:	e1a0000a 	mov	r0, r10
     398:	e1a01005 	mov	r1, r5
     39c:	e1a02004 	mov	r2, r4
     3a0:	ebffffba 	bl	290 <plot_pixel>
    plot_pixel(x+1, y+2, color);
     3a4:	e28a3001 	add	r3, r10, #1
     3a8:	e58d3008 	str	r3, [sp, #8]
     3ac:	e1a00003 	mov	r0, r3
     3b0:	e1a01005 	mov	r1, r5
     3b4:	e1a02004 	mov	r2, r4
     3b8:	ebffffb4 	bl	290 <plot_pixel>
    plot_pixel(x+8, y+2, color);
     3bc:	e28a3008 	add	r3, r10, #8
     3c0:	e58d300c 	str	r3, [sp, #12]
     3c4:	e1a00003 	mov	r0, r3
     3c8:	e1a01005 	mov	r1, r5
     3cc:	e1a02004 	mov	r2, r4
     3d0:	ebffffae 	bl	290 <plot_pixel>
    plot_pixel(x+9, y+2, color);
     3d4:	e28ab009 	add	r11, r10, #9
     3d8:	e1a0000b 	mov	r0, r11
     3dc:	e1a01005 	mov	r1, r5
     3e0:	e1a02004 	mov	r2, r4
     3e4:	ebffffa9 	bl	290 <plot_pixel>
    
    int i;
    int j;
    for(i = 0; i < 10; i++) {
     3e8:	e3a08000 	mov	r8, #0
	*blob_x += 8;
	return;
}

//code for drawing the blob
void draw_blob(int x, int y, int color) {
     3ec:	e3a09003 	mov	r9, #3
    
    int i;
    int j;
    for(i = 0; i < 10; i++) {
        for(j = 3; j < 13; j++) {
            plot_pixel(x + i, y + j, color);
     3f0:	e59d3004 	ldr	r3, [sp, #4]
     3f4:	e6bf7073 	sxth	r7, r3
     3f8:	ea000009 	b	424 <draw_blob+0x110>
     3fc:	e1a00005 	mov	r0, r5
     400:	e0841006 	add	r1, r4, r6
     404:	e1a02007 	mov	r2, r7
     408:	ebffffa0 	bl	290 <plot_pixel>
    plot_pixel(x+9, y+2, color);
    
    int i;
    int j;
    for(i = 0; i < 10; i++) {
        for(j = 3; j < 13; j++) {
     40c:	e2844001 	add	r4, r4, #1
     410:	e354000d 	cmp	r4, #13
     414:	1afffff8 	bne	3fc <draw_blob+0xe8>
    plot_pixel(x+8, y+2, color);
    plot_pixel(x+9, y+2, color);
    
    int i;
    int j;
    for(i = 0; i < 10; i++) {
     418:	e2888001 	add	r8, r8, #1
     41c:	e358000a 	cmp	r8, #10
     420:	0a000002 	beq	430 <draw_blob+0x11c>
	*blob_x += 8;
	return;
}

//code for drawing the blob
void draw_blob(int x, int y, int color) {
     424:	e1a04009 	mov	r4, r9
     428:	e088500a 	add	r5, r8, r10
     42c:	eafffff2 	b	3fc <draw_blob+0xe8>
            plot_pixel(x + i, y + j, color);
        }
    }
    
	//draw legs
    plot_pixel(x, y+13, color);
     430:	e286500d 	add	r5, r6, #13
     434:	e59d3004 	ldr	r3, [sp, #4]
     438:	e6bf4073 	sxth	r4, r3
     43c:	e1a0000a 	mov	r0, r10
     440:	e1a01005 	mov	r1, r5
     444:	e1a02004 	mov	r2, r4
     448:	ebffff90 	bl	290 <plot_pixel>
    plot_pixel(x+1, y+13, color);
     44c:	e59d0008 	ldr	r0, [sp, #8]
     450:	e1a01005 	mov	r1, r5
     454:	e1a02004 	mov	r2, r4
     458:	ebffff8c 	bl	290 <plot_pixel>
    plot_pixel(x+8, y+13, color);
     45c:	e59d000c 	ldr	r0, [sp, #12]
     460:	e1a01005 	mov	r1, r5
     464:	e1a02004 	mov	r2, r4
     468:	ebffff88 	bl	290 <plot_pixel>
    plot_pixel(x+9, y+13, color);
     46c:	e1a0000b 	mov	r0, r11
     470:	e1a01005 	mov	r1, r5
     474:	e1a02004 	mov	r2, r4
     478:	ebffff84 	bl	290 <plot_pixel>
    plot_pixel(x, y+14, color);
     47c:	e286500e 	add	r5, r6, #14
     480:	e1a0000a 	mov	r0, r10
     484:	e1a01005 	mov	r1, r5
     488:	e1a02004 	mov	r2, r4
     48c:	ebffff7f 	bl	290 <plot_pixel>
    plot_pixel(x+1, y+14, color);
     490:	e59d0008 	ldr	r0, [sp, #8]
     494:	e1a01005 	mov	r1, r5
     498:	e1a02004 	mov	r2, r4
     49c:	ebffff7b 	bl	290 <plot_pixel>
    plot_pixel(x+8, y+14, color);
     4a0:	e59d000c 	ldr	r0, [sp, #12]
     4a4:	e1a01005 	mov	r1, r5
     4a8:	e1a02004 	mov	r2, r4
     4ac:	ebffff77 	bl	290 <plot_pixel>
    plot_pixel(x+9, y+14, color);
     4b0:	e1a0000b 	mov	r0, r11
     4b4:	e1a01005 	mov	r1, r5
     4b8:	e1a02004 	mov	r2, r4
     4bc:	ebffff73 	bl	290 <plot_pixel>
	
	//draw beak
	plot_pixel(x+9, y+3, color);
     4c0:	e2868003 	add	r8, r6, #3
     4c4:	e1a0000b 	mov	r0, r11
     4c8:	e1a01008 	mov	r1, r8
     4cc:	e1a02004 	mov	r2, r4
     4d0:	ebffff6e 	bl	290 <plot_pixel>
	plot_pixel(x+10, y+3, color);
     4d4:	e28a700a 	add	r7, r10, #10
     4d8:	e1a00007 	mov	r0, r7
     4dc:	e1a01008 	mov	r1, r8
     4e0:	e1a02004 	mov	r2, r4
     4e4:	ebffff69 	bl	290 <plot_pixel>
	plot_pixel(x+11, y+3, color);
     4e8:	e28a500b 	add	r5, r10, #11
     4ec:	e1a00005 	mov	r0, r5
     4f0:	e1a01008 	mov	r1, r8
     4f4:	e1a02004 	mov	r2, r4
     4f8:	ebffff64 	bl	290 <plot_pixel>
	plot_pixel(x+12, y+3, color);
     4fc:	e28aa00c 	add	r10, r10, #12
     500:	e1a0000a 	mov	r0, r10
     504:	e1a01008 	mov	r1, r8
     508:	e1a02004 	mov	r2, r4
     50c:	ebffff5f 	bl	290 <plot_pixel>
	plot_pixel(x+12, y+3, color);
     510:	e1a0000a 	mov	r0, r10
     514:	e1a01008 	mov	r1, r8
     518:	e1a02004 	mov	r2, r4
     51c:	ebffff5b 	bl	290 <plot_pixel>
	plot_pixel(x+12, y+3, color);
     520:	e1a0000a 	mov	r0, r10
     524:	e1a01008 	mov	r1, r8
     528:	e1a02004 	mov	r2, r4
     52c:	ebffff57 	bl	290 <plot_pixel>
	plot_pixel(x+9, y+4, color);
     530:	e2866004 	add	r6, r6, #4
     534:	e1a0000b 	mov	r0, r11
     538:	e1a01006 	mov	r1, r6
     53c:	e1a02004 	mov	r2, r4
     540:	ebffff52 	bl	290 <plot_pixel>
	plot_pixel(x+10, y+4, color);
     544:	e1a00007 	mov	r0, r7
     548:	e1a01006 	mov	r1, r6
     54c:	e1a02004 	mov	r2, r4
     550:	ebffff4e 	bl	290 <plot_pixel>
	plot_pixel(x+11, y+4, color);
     554:	e1a00005 	mov	r0, r5
     558:	e1a01006 	mov	r1, r6
     55c:	e1a02004 	mov	r2, r4
     560:	ebffff4a 	bl	290 <plot_pixel>
	plot_pixel(x+12, y+4, color);
     564:	e1a0000a 	mov	r0, r10
     568:	e1a01006 	mov	r1, r6
     56c:	e1a02004 	mov	r2, r4
     570:	ebffff46 	bl	290 <plot_pixel>
	plot_pixel(x+12, y+4, color);
     574:	e1a0000a 	mov	r0, r10
     578:	e1a01006 	mov	r1, r6
     57c:	e1a02004 	mov	r2, r4
     580:	ebffff42 	bl	290 <plot_pixel>
	plot_pixel(x+12, y+4, color);
     584:	e1a0000a 	mov	r0, r10
     588:	e1a01006 	mov	r1, r6
     58c:	e1a02004 	mov	r2, r4
     590:	ebffff3e 	bl	290 <plot_pixel>
	
}
     594:	e28dd014 	add	sp, sp, #20
     598:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

0000059c <draw_line>:
        draw_line(x[i], x[i] + 40, y[i] + 1, y[i] + 1, platform_color);
        draw_line(x[i], x[i] + 40, y[i] + 2, y[i] + 2, platform_color);
    }
}

void draw_line(int x0, int x1, int y0, int y1, short int line_color){
     59c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     5a0:	e24dd014 	sub	sp, sp, #20
     5a4:	e58d000c 	str	r0, [sp, #12]
     5a8:	e58d1008 	str	r1, [sp, #8]
     5ac:	e58d2004 	str	r2, [sp, #4]
     5b0:	e58d3000 	str	r3, [sp]
     5b4:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
    bool steep = abs(y1-y0)>abs(x1-x0);
     5b8:	e0623003 	rsb	r3, r2, r3
     5bc:	e3530000 	cmp	r3, #0
     5c0:	b2633000 	rsblt	r3, r3, #0
     5c4:	e0601001 	rsb	r1, r0, r1
     5c8:	e0217fc1 	eor	r7, r1, r1, asr #31
     5cc:	e0477fc1 	sub	r7, r7, r1, asr #31
     5d0:	e1530007 	cmp	r3, r7
     5d4:	d3a07000 	movle	r7, #0
     5d8:	c3a07001 	movgt	r7, #1
    if(steep){
     5dc:	e3570000 	cmp	r7, #0
     5e0:	0a000005 	beq	5fc <draw_line+0x60>
        swap(&x0,&y0);
     5e4:	e28d000c 	add	r0, sp, #12
     5e8:	e28d1004 	add	r1, sp, #4
     5ec:	ebffff2e 	bl	2ac <swap>
        swap(&x1,&y1);
     5f0:	e28d0008 	add	r0, sp, #8
     5f4:	e1a0100d 	mov	r1, sp
     5f8:	ebffff2b 	bl	2ac <swap>
    }
    
    if(x0>x1){
     5fc:	e59d3008 	ldr	r3, [sp, #8]
     600:	e59d200c 	ldr	r2, [sp, #12]
     604:	e1520003 	cmp	r2, r3
     608:	da000005 	ble	624 <draw_line+0x88>
        swap(&x0,&x1);
     60c:	e28d000c 	add	r0, sp, #12
     610:	e28d1008 	add	r1, sp, #8
     614:	ebffff24 	bl	2ac <swap>
        swap(&y0,&y1);
     618:	e28d0004 	add	r0, sp, #4
     61c:	e1a0100d 	mov	r1, sp
     620:	ebffff21 	bl	2ac <swap>
    }
    
    int del_x = x1 - x0;
     624:	e59d3008 	ldr	r3, [sp, #8]
     628:	e59d500c 	ldr	r5, [sp, #12]
     62c:	e0659003 	rsb	r9, r5, r3
    int del_y = abs(y1 -y0);
     630:	e59d2000 	ldr	r2, [sp]
     634:	e59d6004 	ldr	r6, [sp, #4]
     638:	e0668002 	rsb	r8, r6, r2
     63c:	e3580000 	cmp	r8, #0
     640:	b2688000 	rsblt	r8, r8, #0
    int error = -(del_x /2);
     644:	e0894fa9 	add	r4, r9, r9, lsr #31
     648:	e1a040c4 	asr	r4, r4, #1
     64c:	e2644000 	rsb	r4, r4, #0
    int x;
    
    int y_step;
    
    if(y0 < y1){
        y_step = 1;
     650:	e1520006 	cmp	r2, r6
     654:	d3e0b000 	mvnle	r11, #0
     658:	c3a0b001 	movgt	r11, #1
    
    else{
        y_step = -1;
    }
    
    for(x = x0; x <= x1; ++x){
     65c:	e1530005 	cmp	r3, r5
     660:	ba00000e 	blt	6a0 <draw_line+0x104>
        if(steep){
     664:	e3570000 	cmp	r7, #0
            plot_pixel(y,x,line_color);
     668:	11a00006 	movne	r0, r6
     66c:	11a01005 	movne	r1, r5
        }
        else {
            plot_pixel(x,y,line_color);
     670:	01a00005 	moveq	r0, r5
     674:	01a01006 	moveq	r1, r6
     678:	e1a0200a 	mov	r2, r10
     67c:	ebffff03 	bl	290 <plot_pixel>
        }
        error = error + del_y;
     680:	e0844008 	add	r4, r4, r8
        
        if(error > 0){
     684:	e3540000 	cmp	r4, #0
            y = y + y_step;
     688:	c086600b 	addgt	r6, r6, r11
            error = error - del_x;
     68c:	c0694004 	rsbgt	r4, r9, r4
    
    else{
        y_step = -1;
    }
    
    for(x = x0; x <= x1; ++x){
     690:	e2855001 	add	r5, r5, #1
     694:	e59d3008 	ldr	r3, [sp, #8]
     698:	e1530005 	cmp	r3, r5
     69c:	aafffff0 	bge	664 <draw_line+0xc8>
            error = error - del_x;
        }
    }
    return;
    
}
     6a0:	e28dd014 	add	sp, sp, #20
     6a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000006a8 <draw_platforms>:
	plot_pixel(x+12, y+4, color);
	
}

//draw the platforms
void draw_platforms(int x[], int y[]) {
     6a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     6ac:	e24dd00c 	sub	sp, sp, #12
     6b0:	e1a07000 	mov	r7, r0
     6b4:	e1a06001 	mov	r6, r1
     6b8:	e3a04000 	mov	r4, #0
    int i;
    short int platform_color = 0x00FF00;
    
    //draw platforms
    for(i = 0; i < 20; i++) {
        draw_line(x[i], x[i] + 40, y[i], y[i], platform_color);
     6bc:	e3e050ff 	mvn	r5, #255	; 0xff
     6c0:	e7971004 	ldr	r1, [r7, r4]
     6c4:	e7963004 	ldr	r3, [r6, r4]
     6c8:	e58d5000 	str	r5, [sp]
     6cc:	e1a00001 	mov	r0, r1
     6d0:	e2811028 	add	r1, r1, #40	; 0x28
     6d4:	e1a02003 	mov	r2, r3
     6d8:	ebffffaf 	bl	59c <draw_line>
        draw_line(x[i], x[i] + 40, y[i] + 1, y[i] + 1, platform_color);
     6dc:	e7971004 	ldr	r1, [r7, r4]
     6e0:	e7963004 	ldr	r3, [r6, r4]
     6e4:	e2833001 	add	r3, r3, #1
     6e8:	e58d5000 	str	r5, [sp]
     6ec:	e1a00001 	mov	r0, r1
     6f0:	e2811028 	add	r1, r1, #40	; 0x28
     6f4:	e1a02003 	mov	r2, r3
     6f8:	ebffffa7 	bl	59c <draw_line>
        draw_line(x[i], x[i] + 40, y[i] + 2, y[i] + 2, platform_color);
     6fc:	e7971004 	ldr	r1, [r7, r4]
     700:	e7963004 	ldr	r3, [r6, r4]
     704:	e2833002 	add	r3, r3, #2
     708:	e58d5000 	str	r5, [sp]
     70c:	e1a00001 	mov	r0, r1
     710:	e2811028 	add	r1, r1, #40	; 0x28
     714:	e1a02003 	mov	r2, r3
     718:	ebffff9f 	bl	59c <draw_line>
     71c:	e2844004 	add	r4, r4, #4
void draw_platforms(int x[], int y[]) {
    int i;
    short int platform_color = 0x00FF00;
    
    //draw platforms
    for(i = 0; i < 20; i++) {
     720:	e3540050 	cmp	r4, #80	; 0x50
     724:	1affffe5 	bne	6c0 <draw_platforms+0x18>
        draw_line(x[i], x[i] + 40, y[i], y[i], platform_color);
        draw_line(x[i], x[i] + 40, y[i] + 1, y[i] + 1, platform_color);
        draw_line(x[i], x[i] + 40, y[i] + 2, y[i] + 2, platform_color);
    }
}
     728:	e28dd00c 	add	sp, sp, #12
     72c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00000730 <draw_digits>:

    //draw levels word
    
}

void draw_digits(int digit, int offset) {
     730:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     734:	e24dd008 	sub	sp, sp, #8
     738:	e1a05001 	mov	r5, r1
    
    if(digit == 0) {
     73c:	e2504000 	subs	r4, r0, #0
     740:	1a00001d 	bne	7bc <draw_digits+0x8c>
        draw_line(306 - offset, 315 - offset, 217, 217, 0xFFFFFF);
     744:	e2618e13 	rsb	r8, r1, #304	; 0x130
     748:	e2888002 	add	r8, r8, #2
     74c:	e2616f4e 	rsb	r6, r1, #312	; 0x138
     750:	e2866003 	add	r6, r6, #3
     754:	e3e07000 	mvn	r7, #0
     758:	e58d7000 	str	r7, [sp]
     75c:	e1a00008 	mov	r0, r8
     760:	e1a01006 	mov	r1, r6
     764:	e3a020d9 	mov	r2, #217	; 0xd9
     768:	e1a03002 	mov	r3, r2
     76c:	ebffff8a 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 235, 235, 0xFFFFFF);
     770:	e58d7000 	str	r7, [sp]
     774:	e1a00008 	mov	r0, r8
     778:	e1a01006 	mov	r1, r6
     77c:	e3a020eb 	mov	r2, #235	; 0xeb
     780:	e1a03002 	mov	r3, r2
     784:	ebffff84 	bl	59c <draw_line>
        draw_line(306 - offset, 306 - offset, 217, 235, 0xFFFFFF);
     788:	e58d7000 	str	r7, [sp]
     78c:	e1a00008 	mov	r0, r8
     790:	e1a01008 	mov	r1, r8
     794:	e3a020d9 	mov	r2, #217	; 0xd9
     798:	e3a030eb 	mov	r3, #235	; 0xeb
     79c:	ebffff7e 	bl	59c <draw_line>
        draw_line(315 - offset, 315 - offset, 217, 235, 0xFFFFFF);
     7a0:	e58d7000 	str	r7, [sp]
     7a4:	e1a00006 	mov	r0, r6
     7a8:	e1a01006 	mov	r1, r6
     7ac:	e3a020d9 	mov	r2, #217	; 0xd9
     7b0:	e3a030eb 	mov	r3, #235	; 0xeb
     7b4:	ebffff78 	bl	59c <draw_line>
     7b8:	ea000030 	b	880 <draw_digits+0x150>
    }
    if(digit == 1) {
     7bc:	e3540001 	cmp	r4, #1
     7c0:	1a000008 	bne	7e8 <draw_digits+0xb8>
        draw_line(315 - offset, 315 - offset, 217, 235, 0xFFFFFF);
     7c4:	e2611f4e 	rsb	r1, r1, #312	; 0x138
     7c8:	e2811003 	add	r1, r1, #3
     7cc:	e3e03000 	mvn	r3, #0
     7d0:	e58d3000 	str	r3, [sp]
     7d4:	e1a00001 	mov	r0, r1
     7d8:	e3a020d9 	mov	r2, #217	; 0xd9
     7dc:	e3a030eb 	mov	r3, #235	; 0xeb
     7e0:	ebffff6d 	bl	59c <draw_line>
     7e4:	ea000045 	b	900 <draw_digits+0x1d0>
    }
    if(digit == 2) {
     7e8:	e3540002 	cmp	r4, #2
     7ec:	1a000023 	bne	880 <draw_digits+0x150>
        draw_line(306 - offset, 315 - offset, 217, 217, 0xFFFFFF);
     7f0:	e2617e13 	rsb	r7, r1, #304	; 0x130
     7f4:	e2877002 	add	r7, r7, #2
     7f8:	e2616f4e 	rsb	r6, r1, #312	; 0x138
     7fc:	e2866003 	add	r6, r6, #3
     800:	e3e08000 	mvn	r8, #0
     804:	e58d8000 	str	r8, [sp]
     808:	e1a00007 	mov	r0, r7
     80c:	e1a01006 	mov	r1, r6
     810:	e3a020d9 	mov	r2, #217	; 0xd9
     814:	e1a03002 	mov	r3, r2
     818:	ebffff5f 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 235, 235, 0xFFFFFF);
     81c:	e58d8000 	str	r8, [sp]
     820:	e1a00007 	mov	r0, r7
     824:	e1a01006 	mov	r1, r6
     828:	e3a020eb 	mov	r2, #235	; 0xeb
     82c:	e1a03002 	mov	r3, r2
     830:	ebffff59 	bl	59c <draw_line>
        draw_line(306 - offset, 306 - offset, 226, 235, 0xFFFFFF);
     834:	e58d8000 	str	r8, [sp]
     838:	e1a00007 	mov	r0, r7
     83c:	e1a01007 	mov	r1, r7
     840:	e3a020e2 	mov	r2, #226	; 0xe2
     844:	e3a030eb 	mov	r3, #235	; 0xeb
     848:	ebffff53 	bl	59c <draw_line>
        draw_line(315 - offset, 315 - offset, 217, 226, 0xFFFFFF);
     84c:	e58d8000 	str	r8, [sp]
     850:	e1a00006 	mov	r0, r6
     854:	e1a01006 	mov	r1, r6
     858:	e3a020d9 	mov	r2, #217	; 0xd9
     85c:	e3a030e2 	mov	r3, #226	; 0xe2
     860:	ebffff4d 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 226, 226, 0xFFFFFF);
     864:	e58d8000 	str	r8, [sp]
     868:	e1a00007 	mov	r0, r7
     86c:	e1a01006 	mov	r1, r6
     870:	e3a020e2 	mov	r2, #226	; 0xe2
     874:	e1a03002 	mov	r3, r2
     878:	ebffff47 	bl	59c <draw_line>
     87c:	ea000039 	b	968 <draw_digits+0x238>
    }
    if(digit == 3) {
     880:	e3540003 	cmp	r4, #3
     884:	1a00001d 	bne	900 <draw_digits+0x1d0>
        draw_line(306 - offset, 315 - offset, 217, 217, 0xFFFFFF);
     888:	e2658e13 	rsb	r8, r5, #304	; 0x130
     88c:	e2888002 	add	r8, r8, #2
     890:	e2656f4e 	rsb	r6, r5, #312	; 0x138
     894:	e2866003 	add	r6, r6, #3
     898:	e3e07000 	mvn	r7, #0
     89c:	e58d7000 	str	r7, [sp]
     8a0:	e1a00008 	mov	r0, r8
     8a4:	e1a01006 	mov	r1, r6
     8a8:	e3a020d9 	mov	r2, #217	; 0xd9
     8ac:	e1a03002 	mov	r3, r2
     8b0:	ebffff39 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 235, 235, 0xFFFFFF);
     8b4:	e58d7000 	str	r7, [sp]
     8b8:	e1a00008 	mov	r0, r8
     8bc:	e1a01006 	mov	r1, r6
     8c0:	e3a020eb 	mov	r2, #235	; 0xeb
     8c4:	e1a03002 	mov	r3, r2
     8c8:	ebffff33 	bl	59c <draw_line>
        draw_line(315 - offset, 315 - offset, 217, 235, 0xFFFFFF);
     8cc:	e58d7000 	str	r7, [sp]
     8d0:	e1a00006 	mov	r0, r6
     8d4:	e1a01006 	mov	r1, r6
     8d8:	e3a020d9 	mov	r2, #217	; 0xd9
     8dc:	e3a030eb 	mov	r3, #235	; 0xeb
     8e0:	ebffff2d 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 226, 226, 0xFFFFFF);
     8e4:	e58d7000 	str	r7, [sp]
     8e8:	e1a00008 	mov	r0, r8
     8ec:	e1a01006 	mov	r1, r6
     8f0:	e3a020e2 	mov	r2, #226	; 0xe2
     8f4:	e1a03002 	mov	r3, r2
     8f8:	ebffff27 	bl	59c <draw_line>
     8fc:	ea00003f 	b	a00 <draw_digits+0x2d0>
    }
    if(digit == 4) {
     900:	e3540004 	cmp	r4, #4
     904:	1a000017 	bne	968 <draw_digits+0x238>
        draw_line(306 - offset, 306 - offset, 217, 226, 0xFFFFFF);
     908:	e2657e13 	rsb	r7, r5, #304	; 0x130
     90c:	e2877002 	add	r7, r7, #2
     910:	e3e08000 	mvn	r8, #0
     914:	e58d8000 	str	r8, [sp]
     918:	e1a00007 	mov	r0, r7
     91c:	e1a01007 	mov	r1, r7
     920:	e3a020d9 	mov	r2, #217	; 0xd9
     924:	e3a030e2 	mov	r3, #226	; 0xe2
     928:	ebffff1b 	bl	59c <draw_line>
        draw_line(315 - offset, 315 - offset, 217, 235, 0xFFFFFF);
     92c:	e2656f4e 	rsb	r6, r5, #312	; 0x138
     930:	e2866003 	add	r6, r6, #3
     934:	e58d8000 	str	r8, [sp]
     938:	e1a00006 	mov	r0, r6
     93c:	e1a01006 	mov	r1, r6
     940:	e3a020d9 	mov	r2, #217	; 0xd9
     944:	e3a030eb 	mov	r3, #235	; 0xeb
     948:	ebffff13 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 226, 226, 0xFFFFFF);
     94c:	e58d8000 	str	r8, [sp]
     950:	e1a00007 	mov	r0, r7
     954:	e1a01006 	mov	r1, r6
     958:	e3a020e2 	mov	r2, #226	; 0xe2
     95c:	e1a03002 	mov	r3, r2
     960:	ebffff0d 	bl	59c <draw_line>
     964:	ea00004b 	b	a98 <draw_digits+0x368>
    }
    if(digit == 5) {
     968:	e3540005 	cmp	r4, #5
     96c:	1a000023 	bne	a00 <draw_digits+0x2d0>
        draw_line(306 - offset, 315 - offset, 217, 217, 0xFFFFFF);
     970:	e2657e13 	rsb	r7, r5, #304	; 0x130
     974:	e2877002 	add	r7, r7, #2
     978:	e2656f4e 	rsb	r6, r5, #312	; 0x138
     97c:	e2866003 	add	r6, r6, #3
     980:	e3e08000 	mvn	r8, #0
     984:	e58d8000 	str	r8, [sp]
     988:	e1a00007 	mov	r0, r7
     98c:	e1a01006 	mov	r1, r6
     990:	e3a020d9 	mov	r2, #217	; 0xd9
     994:	e1a03002 	mov	r3, r2
     998:	ebfffeff 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 235, 235, 0xFFFFFF);
     99c:	e58d8000 	str	r8, [sp]
     9a0:	e1a00007 	mov	r0, r7
     9a4:	e1a01006 	mov	r1, r6
     9a8:	e3a020eb 	mov	r2, #235	; 0xeb
     9ac:	e1a03002 	mov	r3, r2
     9b0:	ebfffef9 	bl	59c <draw_line>
        draw_line(306 - offset, 306 - offset, 217, 226, 0xFFFFFF);
     9b4:	e58d8000 	str	r8, [sp]
     9b8:	e1a00007 	mov	r0, r7
     9bc:	e1a01007 	mov	r1, r7
     9c0:	e3a020d9 	mov	r2, #217	; 0xd9
     9c4:	e3a030e2 	mov	r3, #226	; 0xe2
     9c8:	ebfffef3 	bl	59c <draw_line>
        draw_line(315 - offset, 315 - offset, 226, 235, 0xFFFFFF);
     9cc:	e58d8000 	str	r8, [sp]
     9d0:	e1a00006 	mov	r0, r6
     9d4:	e1a01006 	mov	r1, r6
     9d8:	e3a020e2 	mov	r2, #226	; 0xe2
     9dc:	e3a030eb 	mov	r3, #235	; 0xeb
     9e0:	ebfffeed 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 226, 226, 0xFFFFFF);
     9e4:	e58d8000 	str	r8, [sp]
     9e8:	e1a00007 	mov	r0, r7
     9ec:	e1a01006 	mov	r1, r6
     9f0:	e3a020e2 	mov	r2, #226	; 0xe2
     9f4:	e1a03002 	mov	r3, r2
     9f8:	ebfffee7 	bl	59c <draw_line>
     9fc:	ea000038 	b	ae4 <draw_digits+0x3b4>
    }
    if(digit == 6) {
     a00:	e3540006 	cmp	r4, #6
     a04:	1a000023 	bne	a98 <draw_digits+0x368>
        draw_line(306 - offset, 315 - offset, 217, 217, 0xFFFFFF);
     a08:	e2657e13 	rsb	r7, r5, #304	; 0x130
     a0c:	e2877002 	add	r7, r7, #2
     a10:	e2656f4e 	rsb	r6, r5, #312	; 0x138
     a14:	e2866003 	add	r6, r6, #3
     a18:	e3e08000 	mvn	r8, #0
     a1c:	e58d8000 	str	r8, [sp]
     a20:	e1a00007 	mov	r0, r7
     a24:	e1a01006 	mov	r1, r6
     a28:	e3a020d9 	mov	r2, #217	; 0xd9
     a2c:	e1a03002 	mov	r3, r2
     a30:	ebfffed9 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 235, 235, 0xFFFFFF);
     a34:	e58d8000 	str	r8, [sp]
     a38:	e1a00007 	mov	r0, r7
     a3c:	e1a01006 	mov	r1, r6
     a40:	e3a020eb 	mov	r2, #235	; 0xeb
     a44:	e1a03002 	mov	r3, r2
     a48:	ebfffed3 	bl	59c <draw_line>
        draw_line(306 - offset, 306 - offset, 217, 235, 0xFFFFFF);
     a4c:	e58d8000 	str	r8, [sp]
     a50:	e1a00007 	mov	r0, r7
     a54:	e1a01007 	mov	r1, r7
     a58:	e3a020d9 	mov	r2, #217	; 0xd9
     a5c:	e3a030eb 	mov	r3, #235	; 0xeb
     a60:	ebfffecd 	bl	59c <draw_line>
        draw_line(315 - offset, 315 - offset, 226, 235, 0xFFFFFF);
     a64:	e58d8000 	str	r8, [sp]
     a68:	e1a00006 	mov	r0, r6
     a6c:	e1a01006 	mov	r1, r6
     a70:	e3a020e2 	mov	r2, #226	; 0xe2
     a74:	e3a030eb 	mov	r3, #235	; 0xeb
     a78:	ebfffec7 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 226, 226, 0xFFFFFF);
     a7c:	e58d8000 	str	r8, [sp]
     a80:	e1a00007 	mov	r0, r7
     a84:	e1a01006 	mov	r1, r6
     a88:	e3a020e2 	mov	r2, #226	; 0xe2
     a8c:	e1a03002 	mov	r3, r2
     a90:	ebfffec1 	bl	59c <draw_line>
     a94:	ea000038 	b	b7c <draw_digits+0x44c>
    }
    if(digit == 7) {
     a98:	e3540007 	cmp	r4, #7
     a9c:	1a000010 	bne	ae4 <draw_digits+0x3b4>
        draw_line(306 - offset, 315 - offset, 217, 217, 0xFFFFFF);
     aa0:	e2654f4e 	rsb	r4, r5, #312	; 0x138
     aa4:	e2844003 	add	r4, r4, #3
     aa8:	e2650e13 	rsb	r0, r5, #304	; 0x130
     aac:	e3e06000 	mvn	r6, #0
     ab0:	e58d6000 	str	r6, [sp]
     ab4:	e2800002 	add	r0, r0, #2
     ab8:	e1a01004 	mov	r1, r4
     abc:	e3a020d9 	mov	r2, #217	; 0xd9
     ac0:	e1a03002 	mov	r3, r2
     ac4:	ebfffeb4 	bl	59c <draw_line>
        draw_line(315 - offset, 315 - offset, 217, 235, 0xFFFFFF);
     ac8:	e58d6000 	str	r6, [sp]
     acc:	e1a00004 	mov	r0, r4
     ad0:	e1a01004 	mov	r1, r4
     ad4:	e3a020d9 	mov	r2, #217	; 0xd9
     ad8:	e3a030eb 	mov	r3, #235	; 0xeb
     adc:	ebfffeae 	bl	59c <draw_line>
     ae0:	ea000044 	b	bf8 <draw_digits+0x4c8>
    }
    if(digit == 8) {
     ae4:	e3540008 	cmp	r4, #8
     ae8:	1a000023 	bne	b7c <draw_digits+0x44c>
        draw_line(306 - offset, 315 - offset, 217, 217, 0xFFFFFF);
     aec:	e2654e13 	rsb	r4, r5, #304	; 0x130
     af0:	e2844002 	add	r4, r4, #2
     af4:	e2655f4e 	rsb	r5, r5, #312	; 0x138
     af8:	e2855003 	add	r5, r5, #3
     afc:	e3e06000 	mvn	r6, #0
     b00:	e58d6000 	str	r6, [sp]
     b04:	e1a00004 	mov	r0, r4
     b08:	e1a01005 	mov	r1, r5
     b0c:	e3a020d9 	mov	r2, #217	; 0xd9
     b10:	e1a03002 	mov	r3, r2
     b14:	ebfffea0 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 235, 235, 0xFFFFFF);
     b18:	e58d6000 	str	r6, [sp]
     b1c:	e1a00004 	mov	r0, r4
     b20:	e1a01005 	mov	r1, r5
     b24:	e3a020eb 	mov	r2, #235	; 0xeb
     b28:	e1a03002 	mov	r3, r2
     b2c:	ebfffe9a 	bl	59c <draw_line>
        draw_line(306 - offset, 306 - offset, 217, 235, 0xFFFFFF);
     b30:	e58d6000 	str	r6, [sp]
     b34:	e1a00004 	mov	r0, r4
     b38:	e1a01004 	mov	r1, r4
     b3c:	e3a020d9 	mov	r2, #217	; 0xd9
     b40:	e3a030eb 	mov	r3, #235	; 0xeb
     b44:	ebfffe94 	bl	59c <draw_line>
        draw_line(315 - offset, 315 - offset, 217, 235, 0xFFFFFF);
     b48:	e58d6000 	str	r6, [sp]
     b4c:	e1a00005 	mov	r0, r5
     b50:	e1a01005 	mov	r1, r5
     b54:	e3a020d9 	mov	r2, #217	; 0xd9
     b58:	e3a030eb 	mov	r3, #235	; 0xeb
     b5c:	ebfffe8e 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 226, 226, 0xFFFFFF);
     b60:	e58d6000 	str	r6, [sp]
     b64:	e1a00004 	mov	r0, r4
     b68:	e1a01005 	mov	r1, r5
     b6c:	e3a020e2 	mov	r2, #226	; 0xe2
     b70:	e1a03002 	mov	r3, r2
     b74:	ebfffe88 	bl	59c <draw_line>
     b78:	ea00001e 	b	bf8 <draw_digits+0x4c8>
    }
    if(digit == 9) {
     b7c:	e3540009 	cmp	r4, #9
     b80:	1a00001c 	bne	bf8 <draw_digits+0x4c8>
        draw_line(306 - offset, 315 - offset, 217, 217, 0xFFFFFF);
     b84:	e2654e13 	rsb	r4, r5, #304	; 0x130
     b88:	e2844002 	add	r4, r4, #2
     b8c:	e2655f4e 	rsb	r5, r5, #312	; 0x138
     b90:	e2855003 	add	r5, r5, #3
     b94:	e3e06000 	mvn	r6, #0
     b98:	e58d6000 	str	r6, [sp]
     b9c:	e1a00004 	mov	r0, r4
     ba0:	e1a01005 	mov	r1, r5
     ba4:	e3a020d9 	mov	r2, #217	; 0xd9
     ba8:	e1a03002 	mov	r3, r2
     bac:	ebfffe7a 	bl	59c <draw_line>
        draw_line(306 - offset, 306 - offset, 217, 226, 0xFFFFFF);
     bb0:	e58d6000 	str	r6, [sp]
     bb4:	e1a00004 	mov	r0, r4
     bb8:	e1a01004 	mov	r1, r4
     bbc:	e3a020d9 	mov	r2, #217	; 0xd9
     bc0:	e3a030e2 	mov	r3, #226	; 0xe2
     bc4:	ebfffe74 	bl	59c <draw_line>
        draw_line(315 - offset, 315 - offset, 217, 235, 0xFFFFFF);
     bc8:	e58d6000 	str	r6, [sp]
     bcc:	e1a00005 	mov	r0, r5
     bd0:	e1a01005 	mov	r1, r5
     bd4:	e3a020d9 	mov	r2, #217	; 0xd9
     bd8:	e3a030eb 	mov	r3, #235	; 0xeb
     bdc:	ebfffe6e 	bl	59c <draw_line>
        draw_line(306 - offset, 315 - offset, 226, 226, 0xFFFFFF);
     be0:	e58d6000 	str	r6, [sp]
     be4:	e1a00004 	mov	r0, r4
     be8:	e1a01005 	mov	r1, r5
     bec:	e3a020e2 	mov	r2, #226	; 0xe2
     bf0:	e1a03002 	mov	r3, r2
     bf4:	ebfffe68 	bl	59c <draw_line>
    }
}
     bf8:	e28dd008 	add	sp, sp, #8
     bfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00000c00 <draw_score>:
    }
    return;
    
}

void draw_score(int score) {
     c00:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     c04:	e1a04000 	mov	r4, r0
    int hundreds = score / 100;
    int tens = (score % 100) / 10;
    int ones = score % 10;
     c08:	e3065667 	movw	r5, #26215	; 0x6667
     c0c:	e3465666 	movt	r5, #26214	; 0x6666
     c10:	e0c03095 	smull	r3, r0, r5, r0
     c14:	e1a07fc4 	asr	r7, r4, #31
     c18:	e0670140 	rsb	r0, r7, r0, asr #2
     c1c:	e0800100 	add	r0, r0, r0, lsl #2
    int digit;
    draw_digits(ones, 0);
     c20:	e0440080 	sub	r0, r4, r0, lsl #1
     c24:	e3a01000 	mov	r1, #0
     c28:	ebfffec0 	bl	730 <draw_digits>
    
}

void draw_score(int score) {
    int hundreds = score / 100;
    int tens = (score % 100) / 10;
     c2c:	e308651f 	movw	r6, #34079	; 0x851f
     c30:	e34561eb 	movt	r6, #20971	; 0x51eb
     c34:	e0c63496 	smull	r3, r6, r6, r4
     c38:	e06762c6 	rsb	r6, r7, r6, asr #5
     c3c:	e3a03064 	mov	r3, #100	; 0x64
     c40:	e0644693 	mls	r4, r3, r6, r4
     c44:	e0c03495 	smull	r3, r0, r5, r4
     c48:	e1a04fc4 	asr	r4, r4, #31
    int ones = score % 10;
    int digit;
    draw_digits(ones, 0);
    draw_digits(tens, 12);
     c4c:	e0640140 	rsb	r0, r4, r0, asr #2
     c50:	e3a0100c 	mov	r1, #12
     c54:	ebfffeb5 	bl	730 <draw_digits>
    draw_digits(hundreds, 24);
     c58:	e1a00006 	mov	r0, r6
     c5c:	e3a01018 	mov	r1, #24
     c60:	ebfffeb2 	bl	730 <draw_digits>
     c64:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

00000c68 <clear_screen>:
        draw_line(315 - offset, 315 - offset, 217, 235, 0xFFFFFF);
        draw_line(306 - offset, 315 - offset, 226, 226, 0xFFFFFF);
    }
}

void clear_screen(){
     c68:	e92d4070 	push	{r4, r5, r6, lr}
    int x,y;
    for( x = 0 ; x < 320; ++x){
     c6c:	e3a05000 	mov	r5, #0
        draw_line(315 - offset, 315 - offset, 217, 235, 0xFFFFFF);
        draw_line(306 - offset, 315 - offset, 226, 226, 0xFFFFFF);
    }
}

void clear_screen(){
     c70:	e1a06005 	mov	r6, r5
     c74:	ea000009 	b	ca0 <clear_screen+0x38>
    int x,y;
    for( x = 0 ; x < 320; ++x){
        for( y = 0; y < 240; ++y){
            plot_pixel(x,y,0);
     c78:	e1a00005 	mov	r0, r5
     c7c:	e1a01004 	mov	r1, r4
     c80:	e1a02006 	mov	r2, r6
     c84:	ebfffd81 	bl	290 <plot_pixel>
}

void clear_screen(){
    int x,y;
    for( x = 0 ; x < 320; ++x){
        for( y = 0; y < 240; ++y){
     c88:	e2844001 	add	r4, r4, #1
     c8c:	e35400f0 	cmp	r4, #240	; 0xf0
     c90:	1afffff8 	bne	c78 <clear_screen+0x10>
    }
}

void clear_screen(){
    int x,y;
    for( x = 0 ; x < 320; ++x){
     c94:	e2855001 	add	r5, r5, #1
     c98:	e3550d05 	cmp	r5, #320	; 0x140
     c9c:	08bd8070 	popeq	{r4, r5, r6, pc}
        draw_line(315 - offset, 315 - offset, 217, 235, 0xFFFFFF);
        draw_line(306 - offset, 315 - offset, 226, 226, 0xFFFFFF);
    }
}

void clear_screen(){
     ca0:	e1a04006 	mov	r4, r6
     ca4:	eafffff3 	b	c78 <clear_screen+0x10>

00000ca8 <config_KEYs>:
}

void config_KEYs()
{
    volatile int * KEY_ptr = (int *) 0xFF200050; // KEY base address
    *(KEY_ptr + 2) = 0xF; // enable interrupts for all four KEYs
     ca8:	e3a03000 	mov	r3, #0
     cac:	e34f3f20 	movt	r3, #65312	; 0xff20
     cb0:	e3a0200f 	mov	r2, #15
     cb4:	e5832058 	str	r2, [r3, #88]	; 0x58
     cb8:	e12fff1e 	bx	lr

00000cbc <__cs3_reset>:
    *((int *) 0xFFFEC110) = interrupt_ID;
}

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset (void)
{
     cbc:	eafffffe 	b	cbc <__cs3_reset>

00000cc0 <__cs3_isr_undef>:
    while(1);
}
void __attribute__ ((interrupt)) __cs3_isr_undef (void)
{
     cc0:	eafffffe 	b	cc0 <__cs3_isr_undef>

00000cc4 <__cs3_isr_swi>:
    while(1);
}
void __attribute__ ((interrupt)) __cs3_isr_swi (void)
{
     cc4:	eafffffe 	b	cc4 <__cs3_isr_swi>

00000cc8 <__cs3_isr_pabort>:
    while(1);
}
void __attribute__ ((interrupt)) __cs3_isr_pabort (void)
{
     cc8:	eafffffe 	b	cc8 <__cs3_isr_pabort>

00000ccc <__cs3_isr_dabort>:
    while(1);
}
void __attribute__ ((interrupt)) __cs3_isr_dabort (void)
{
     ccc:	eafffffe 	b	ccc <__cs3_isr_dabort>

00000cd0 <__cs3_isr_fiq>:
    while(1);
}
void __attribute__ ((interrupt)) __cs3_isr_fiq (void)
{
     cd0:	eafffffe 	b	cd0 <__cs3_isr_fiq>

00000cd4 <disable_A9_interrupts>:
 * Turn off interrupts in the ARM processor
 */
void disable_A9_interrupts(void)
{
    int status = 0b11010011;
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     cd4:	e3a030d3 	mov	r3, #211	; 0xd3
     cd8:	e129f003 	msr	CPSR_fc, r3
     cdc:	e12fff1e 	bx	lr

00000ce0 <set_A9_IRQ_stack>:
{
    int stack, mode;
    stack = 0xFFFFFFFF - 7; // top of A9 onchip memory, aligned to 8 bytes
    /* change processor to IRQ mode with interrupts disabled */
    mode = 0b11010010;
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     ce0:	e3a030d2 	mov	r3, #210	; 0xd2
     ce4:	e129f003 	msr	CPSR_fc, r3
    /* set banked stack pointer */
    asm("mov sp, %[ps]" : : [ps] "r" (stack));
     ce8:	e3e03007 	mvn	r3, #7
     cec:	e1a0d003 	mov	sp, r3
    /* go back to SVC mode before executing subroutine return! */
    mode = 0b11010011;
    asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     cf0:	e3a030d3 	mov	r3, #211	; 0xd3
     cf4:	e129f003 	msr	CPSR_fc, r3
     cf8:	e12fff1e 	bx	lr

00000cfc <enable_A9_interrupts>:
 * Turn on interrupts in the ARM processor
 */
void enable_A9_interrupts(void)
{
    int status = 0b01010011;
    asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     cfc:	e3a03053 	mov	r3, #83	; 0x53
     d00:	e129f003 	msr	CPSR_fc, r3
     d04:	e12fff1e 	bx	lr

00000d08 <config_interrupt>:
 * configure only the Interrupt Set Enable Registers (ICDISERn) and
 * Interrupt Processor Target Registers (ICDIPTRn). The default (reset)
 * values are used for other registers in the GIC
 */
void config_interrupt (int N, int CPU_target)
{
     d08:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    int reg_offset, index, value, address;
    /* Configure the Interrupt Set-Enable Registers (ICDISERn).
     * reg_offset = (integer_div(N / 32) * 4; value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC;
     d0c:	e1a031c0 	asr	r3, r0, #3
     d10:	e3c33003 	bic	r3, r3, #3
    index = N & 0x1F;
    value = 0x1 << index;
    address = 0xFFFED100 + reg_offset;
     d14:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
{
    int reg_offset, index, value, address;
    /* Configure the Interrupt Set-Enable Registers (ICDISERn).
     * reg_offset = (integer_div(N / 32) * 4; value = 1 << (N mod 32) */
    reg_offset = (N >> 3) & 0xFFFFFFFC;
    index = N & 0x1F;
     d18:	e200201f 	and	r2, r0, #31
    value = 0x1 << index;
    address = 0xFFFED100 + reg_offset;
    /* Using the address and value, set the appropriate bit */
    *(int *)address |= value;
     d1c:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
     d20:	e3a04001 	mov	r4, #1
     d24:	e18c2214 	orr	r2, r12, r4, lsl r2
     d28:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
     * reg_offset = integer_div(N / 4) * 4; index = N mod 4 */
    reg_offset = (N & 0xFFFFFFFC);
    index = N & 0x3;
    address = 0xFFFED800 + reg_offset + index;
    /* Using the address and value, write to (only) the appropriate byte */
    *(char *)address = (char) CPU_target;
     d2c:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
     d30:	e5c01000 	strb	r1, [r0]
}
     d34:	e8bd0010 	ldmfd	sp!, {r4}
     d38:	e12fff1e 	bx	lr

00000d3c <config_GIC>:

/*
 * Configure the Generic Interrupt Controller (GIC)
 */
void config_GIC(void)
{
     d3c:	e92d4008 	push	{r3, lr}
    config_interrupt (73, 1); // configure the FPGA KEYs interrupt (73)
     d40:	e3a00049 	mov	r0, #73	; 0x49
     d44:	e3a01001 	mov	r1, #1
     d48:	ebffffee 	bl	d08 <config_interrupt>
    // Set Interrupt Priority Mask Register (ICCPMR). Enable all priorities
    *((int *) 0xFFFEC104) = 0xFFFF;
     d4c:	e3e02a13 	mvn	r2, #77824	; 0x13000
     d50:	e30f3fff 	movw	r3, #65535	; 0xffff
     d54:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
    // Set the enable in the CPU Interface Control Register (ICCICR)
    *((int *) 0xFFFEC100) = 1;
     d58:	e3a03001 	mov	r3, #1
     d5c:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101
    // Set the enable in the Distributor Control Register (ICDDCR)
    *((int *) 0xFFFED000) = 1;
     d60:	e3e02a12 	mvn	r2, #73728	; 0x12000
     d64:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     d68:	e8bd8008 	pop	{r3, pc}

00000d6c <main>:
void draw_score(int score);
void draw_digits(int digit, int offset);
void clear_screen();

int main(void)
{
     d6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     d70:	e24dd0ec 	sub	sp, sp, #236	; 0xec
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;

    //next gen stuff 
    disable_A9_interrupts (); // disable interrupts in the A9 processor
     d74:	ebffffd6 	bl	cd4 <disable_A9_interrupts>
    set_A9_IRQ_stack (); // initialize the stack pointer for IRQ mode
     d78:	ebffffd8 	bl	ce0 <set_A9_IRQ_stack>
    config_GIC (); // configure the general interrupt controller
     d7c:	ebffffee 	bl	d3c <config_GIC>
    config_KEYs (); // configure KEYs to generate interrupts
     d80:	ebffffc8 	bl	ca8 <config_KEYs>
    enable_A9_interrupts (); // enable interrupts in the A9 processor
     d84:	ebffffdc 	bl	cfc <enable_A9_interrupts>
        //;
    
    
   
    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the
     d88:	e3034fff 	movw	r4, #16383	; 0x3fff
     d8c:	e34f4f20 	movt	r4, #65312	; 0xff20
     d90:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     d94:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    // back buffer
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
     d98:	ebfffd2f 	bl	25c <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
     d9c:	e5143fdf 	ldr	r3, [r4, #-4063]	; 0xfffff021
     da0:	e3015e0c 	movw	r5, #7692	; 0x1e0c
     da4:	e3405000 	movt	r5, #0
     da8:	e5853000 	str	r3, [r5]
    clear_screen(); // pixel_buffer_start points to the pixel buffer
     dac:	ebffffad 	bl	c68 <clear_screen>
    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
     db0:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     db4:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
     db8:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
     dbc:	e5853000 	str	r3, [r5]
     dc0:	e3a04000 	mov	r4, #0
    int i, j;
    
    //randomize the platforms initially
    for(i = 0; i < 20; i++) {
        //don't draw off the screen
        a[i] = rand()%278;
     dc4:	e30da953 	movw	r10, #55635	; 0xd953
     dc8:	e347a5de 	movt	r10, #30174	; 0x75de
     dcc:	e3008116 	movw	r8, #278	; 0x116
        b[i] = rand()%210;
     dd0:	e30c509d 	movw	r5, #49309	; 0xc09d
     dd4:	e3495c09 	movt	r5, #39945	; 0x9c09
     dd8:	e3a070d2 	mov	r7, #210	; 0xd2
    int i, j;
    
    //randomize the platforms initially
    for(i = 0; i < 20; i++) {
        //don't draw off the screen
        a[i] = rand()%278;
     ddc:	eb0001d3 	bl	1530 <rand>
     de0:	e0c2109a 	smull	r1, r2, r10, r0
     de4:	e1a03fc0 	asr	r3, r0, #31
     de8:	e06333c2 	rsb	r3, r3, r2, asr #7
     dec:	e0600398 	mls	r0, r8, r3, r0
     df0:	e28d3084 	add	r3, sp, #132	; 0x84
     df4:	e7840003 	str	r0, [r4, r3]
        b[i] = rand()%210;
     df8:	eb0001cc 	bl	1530 <rand>
     dfc:	e0c23095 	smull	r3, r2, r5, r0
     e00:	e0822000 	add	r2, r2, r0
     e04:	e1a03fc0 	asr	r3, r0, #31
     e08:	e06333c2 	rsb	r3, r3, r2, asr #7
     e0c:	e0600397 	mls	r0, r7, r3, r0
     e10:	e2842020 	add	r2, r4, #32
     e14:	e1a0100d 	mov	r1, sp
     e18:	e7820001 	str	r0, [r2, r1]
     e1c:	e2844004 	add	r4, r4, #4
    int init_pos_y, distance_jumped;
    // initialize location and direction of rectangles(not shown)
    int i, j;
    
    //randomize the platforms initially
    for(i = 0; i < 20; i++) {
     e20:	e3540050 	cmp	r4, #80	; 0x50
     e24:	1affffec 	bne	ddc <main+0x70>
                pos_y = i;
            }
        }
        
        //saves initial location of blob
        blob_x = a[pos_y];
     e28:	e3017e0c 	movw	r7, #7692	; 0x1e0c
     e2c:	e3407000 	movt	r7, #0
                                }
                            }
                        }
                    }
                }
                count = move_blob(&blob_x, &blob_y, count, decr);
     e30:	e2873004 	add	r3, r7, #4
     e34:	e58d3008 	str	r3, [sp, #8]
                if(count == 95) {
                     decr=-3;
                }
                //stop by checking every time if it has touched a platform
                
                draw_blob(blob_x + 14,blob_y - 15 - offset, 0x13220);
     e38:	e3038220 	movw	r8, #12832	; 0x3220
     e3c:	e3408001 	movt	r8, #1
                            offset = 2;
                            //stop decrementing
                            decr = 0;
                            //count resets to 0 if button is pressed
                            count = 0;
                            distance_jumped = (init_pos_y - blob_y)/5;
     e40:	e306a667 	movw	r10, #26215	; 0x6667
     e44:	e346a666 	movt	r10, #26214	; 0x6666
                                if((b[i] + distance_jumped) < 210) {
                                    b[i] += distance_jumped;
                                }
                                else {
                                    //else replace it with one on the top
                                    a[i] = rand() % 280;
     e48:	e30ab0eb 	movw	r11, #41195	; 0xa0eb
     e4c:	e34eba0e 	movt	r11, #59918	; 0xea0e
                        b[i] += distance_jumped;
                    }
                    else {
                        //else replace it with one on the top
                        a[i] = rand() % 280;
                        b[i] = rand() % distance_jumped;
     e50:	e30690b7 	movw	r9, #24759	; 0x60b7
     e54:	e34b960b 	movt	r9, #46603	; 0xb60b
     e58:	e58d800c 	str	r8, [sp, #12]
     e5c:	e58da010 	str	r10, [sp, #16]
     e60:	e58d9014 	str	r9, [sp, #20]
     e64:	e28d101c 	add	r1, sp, #28
            score = 0;
        }
        
        temp = 0;
        //check for lowest platform
        for(i = 0; i < 20; i++) {
     e68:	e3a03000 	mov	r3, #0
        if(lose) {
            //reset score if you lose
            score = 0;
        }
        
        temp = 0;
     e6c:	e1a00003 	mov	r0, r3
        //check for lowest platform
        for(i = 0; i < 20; i++) {
            if(b[i] >= temp) {
     e70:	e5b12004 	ldr	r2, [r1, #4]!
     e74:	e1520000 	cmp	r2, r0
     e78:	a1a06003 	movge	r6, r3
                temp = b[i];
     e7c:	a1a00002 	movge	r0, r2
            score = 0;
        }
        
        temp = 0;
        //check for lowest platform
        for(i = 0; i < 20; i++) {
     e80:	e2833001 	add	r3, r3, #1
     e84:	e3530014 	cmp	r3, #20
     e88:	1afffff8 	bne	e70 <main+0x104>
                pos_y = i;
            }
        }
        
        //saves initial location of blob
        blob_x = a[pos_y];
     e8c:	e28d00e8 	add	r0, sp, #232	; 0xe8
     e90:	e0803106 	add	r3, r0, r6, lsl #2
     e94:	e5132064 	ldr	r2, [r3, #-100]	; 0xffffff9c
     e98:	e5872004 	str	r2, [r7, #4]
        blob_y = b[pos_y];
     e9c:	e51330c8 	ldr	r3, [r3, #-200]	; 0xffffff38
     ea0:	e5873008 	str	r3, [r7, #8]
        count = 0;
        decr = 3;
        int offset = 0;
     ea4:	e3a04000 	mov	r4, #0
        
        //saves initial location of blob
        blob_x = a[pos_y];
        blob_y = b[pos_y];
        count = 0;
        decr = 3;
     ea8:	e3a09003 	mov	r9, #3
        }
        
        //saves initial location of blob
        blob_x = a[pos_y];
        blob_y = b[pos_y];
        count = 0;
     eac:	e1a0a004 	mov	r10, r4
            }
        }
        
        //saves initial location of blob
        blob_x = a[pos_y];
        blob_y = b[pos_y];
     eb0:	e58d4004 	str	r4, [sp, #4]
        lose = false;

        while (!lose)
        {
            /* Erase any boxes and lines that were drawn in the last iteration */
            clear_screen();
     eb4:	ebffff6b 	bl	c68 <clear_screen>

            // code for drawing the boxes and lines (not shown)
            draw_platforms(a, b);
     eb8:	e28d0084 	add	r0, sp, #132	; 0x84
     ebc:	e28d1020 	add	r1, sp, #32
     ec0:	ebfffdf8 	bl	6a8 <draw_platforms>
            
            // draw score
            draw_score(score);
     ec4:	e59d0004 	ldr	r0, [sp, #4]
     ec8:	ebffff4c 	bl	c00 <draw_score>
            
            
            //NEED TO WRITE THIS IN A FUNCTION AFTER KEY0 CLICKED
            if(count <= 50) {
     ecc:	e35a0032 	cmp	r10, #50	; 0x32
     ed0:	ca000019 	bgt	f3c <main+0x1d0>
                
                //save blob_y position at the platform it bounced on
                if(count == 0) {
     ed4:	e35a0000 	cmp	r10, #0
                    init_pos_y = blob_y - offset;
     ed8:	05973008 	ldreq	r3, [r7, #8]
     edc:	00643003 	rsbeq	r3, r4, r3
     ee0:	058d3018 	streq	r3, [sp, #24]
                }
                //blob jumps a max of 10
                count = move_blob(&blob_x, &blob_y, count, decr);
     ee4:	e59d0008 	ldr	r0, [sp, #8]
     ee8:	e2871008 	add	r1, r7, #8
     eec:	e1a0200a 	mov	r2, r10
     ef0:	e1a03009 	mov	r3, r9
     ef4:	ebfffcf1 	bl	2c0 <move_blob>
     ef8:	e1a0a000 	mov	r10, r0
                if(count == 5) {
     efc:	e3500005 	cmp	r0, #5
                     decr=2;
     f00:	03a09002 	moveq	r9, #2
                if(count == 0) {
                    init_pos_y = blob_y - offset;
                }
                //blob jumps a max of 10
                count = move_blob(&blob_x, &blob_y, count, decr);
                if(count == 5) {
     f04:	0a000005 	beq	f20 <main+0x1b4>
                }
                if(count == 35) {
                     decr=1;
                }
                if(count == 50) {
                     decr=-1;
     f08:	e3500032 	cmp	r0, #50	; 0x32
     f0c:	03e09000 	mvneq	r9, #0
                //blob jumps a max of 10
                count = move_blob(&blob_x, &blob_y, count, decr);
                if(count == 5) {
                     decr=2;
                }
                if(count == 35) {
     f10:	e3500023 	cmp	r0, #35	; 0x23
     f14:	1a000001 	bne	f20 <main+0x1b4>
     f18:	eaffffff 	b	f1c <main+0x1b0>
                     decr=1;
     f1c:	e3a09001 	mov	r9, #1
                }
                if(count == 50) {
                     decr=-1;
                }
                draw_blob(blob_x + 14,blob_y - 15, 0x13220);
     f20:	e5970004 	ldr	r0, [r7, #4]
     f24:	e5971008 	ldr	r1, [r7, #8]
     f28:	e280000e 	add	r0, r0, #14
     f2c:	e241100f 	sub	r1, r1, #15
     f30:	e59d200c 	ldr	r2, [sp, #12]
     f34:	ebfffcf6 	bl	314 <draw_blob>
     f38:	ea00009e 	b	11b8 <main+0x44c>
            }
            else if(count > 50 && count <= 150) {
     f3c:	e24a3033 	sub	r3, r10, #51	; 0x33
     f40:	e3530063 	cmp	r3, #99	; 0x63
     f44:	93a03000 	movls	r3, #0
     f48:	9a000003 	bls	f5c <main+0x1f0>
     f4c:	ea000099 	b	11b8 <main+0x44c>
 
                for(i = 0; i < 20; i++) {
     f50:	e1a04000 	mov	r4, r0
     f54:	e1a09001 	mov	r9, r1
     f58:	e1a0a002 	mov	r10, r2
                    //check if same y as platform
                    if(((blob_x + 23) >= a[i]) && (blob_x + 14 <= (a[i] + 40))) {
     f5c:	e5971004 	ldr	r1, [r7, #4]
     f60:	e28d00e8 	add	r0, sp, #232	; 0xe8
     f64:	e0802103 	add	r2, r0, r3, lsl #2
     f68:	e5122064 	ldr	r2, [r2, #-100]	; 0xffffff9c
     f6c:	e2810017 	add	r0, r1, #23
     f70:	e1500002 	cmp	r0, r2
     f74:	ba00006d 	blt	1130 <main+0x3c4>
     f78:	e281100e 	add	r1, r1, #14
     f7c:	e2822028 	add	r2, r2, #40	; 0x28
     f80:	e1510002 	cmp	r1, r2
     f84:	ca00006d 	bgt	1140 <main+0x3d4>

                        if(blob_y == b[i]) {
     f88:	e28d10e8 	add	r1, sp, #232	; 0xe8
     f8c:	e0812103 	add	r2, r1, r3, lsl #2
     f90:	e51210c8 	ldr	r1, [r2, #-200]	; 0xffffff38
     f94:	e5972008 	ldr	r2, [r7, #8]
     f98:	e1510002 	cmp	r1, r2
     f9c:	1a00001e 	bne	101c <main+0x2b0>
                            //stop decrementing
                            decr = 0;
                            //count resets to 0 if button is pressed
                            count = 0;
                            //save final position of blob_y at new platform
                            distance_jumped = (init_pos_y - blob_y)/5;
     fa0:	e59d2018 	ldr	r2, [sp, #24]
     fa4:	e0611002 	rsb	r1, r1, r2
     fa8:	e59d3010 	ldr	r3, [sp, #16]
     fac:	e0c83193 	smull	r3, r8, r3, r1
     fb0:	e1a01fc1 	asr	r1, r1, #31
     fb4:	e06180c8 	rsb	r8, r1, r8, asr #1
     fb8:	e28d5020 	add	r5, sp, #32
     fbc:	e3a04000 	mov	r4, #0
                                if((b[i] + distance_jumped) < 210) {
                                    b[i] += distance_jumped;
                                }
                                else {
                                    //else replace it with one on the top
                                    a[i] = rand() % 280;
     fc0:	e3a0af46 	mov	r10, #280	; 0x118
                            distance_jumped = (init_pos_y - blob_y)/5;
                            
                            //reloads platforms
                            for(i = 0; i < 20; i++) {
                                //if the platform shifted down is within the vertical range, do it
                                if((b[i] + distance_jumped) < 210) {
     fc4:	e4953004 	ldr	r3, [r5], #4
     fc8:	e0833008 	add	r3, r3, r8
     fcc:	e35300d1 	cmp	r3, #209	; 0xd1
                                    b[i] += distance_jumped;
     fd0:	d5053004 	strle	r3, [r5, #-4]
                            distance_jumped = (init_pos_y - blob_y)/5;
                            
                            //reloads platforms
                            for(i = 0; i < 20; i++) {
                                //if the platform shifted down is within the vertical range, do it
                                if((b[i] + distance_jumped) < 210) {
     fd4:	da00000b 	ble	1008 <main+0x29c>
                                    b[i] += distance_jumped;
                                }
                                else {
                                    //else replace it with one on the top
                                    a[i] = rand() % 280;
     fd8:	eb000154 	bl	1530 <rand>
     fdc:	e0c2109b 	smull	r1, r2, r11, r0
     fe0:	e0822000 	add	r2, r2, r0
     fe4:	e1a03fc0 	asr	r3, r0, #31
     fe8:	e0633442 	rsb	r3, r3, r2, asr #8
     fec:	e060039a 	mls	r0, r10, r3, r0
     ff0:	e28d3084 	add	r3, sp, #132	; 0x84
     ff4:	e7840003 	str	r0, [r4, r3]
                                    b[i] = rand() % distance_jumped;
     ff8:	eb00014c 	bl	1530 <rand>
     ffc:	e1a01008 	mov	r1, r8
    1000:	eb000125 	bl	149c <__aeabi_idivmod>
    1004:	e5051004 	str	r1, [r5, #-4]
    1008:	e2844004 	add	r4, r4, #4
                            count = 0;
                            //save final position of blob_y at new platform
                            distance_jumped = (init_pos_y - blob_y)/5;
                            
                            //reloads platforms
                            for(i = 0; i < 20; i++) {
    100c:	e3540050 	cmp	r4, #80	; 0x50
    1010:	1affffeb 	bne	fc4 <main+0x258>
                for(i = 0; i < 20; i++) {
                    //check if same y as platform
                    if(((blob_x + 23) >= a[i]) && (blob_x + 14 <= (a[i] + 40))) {

                        if(blob_y == b[i]) {
                            offset = 0;
    1014:	e3a04000 	mov	r4, #0
    1018:	ea00009a 	b	1288 <main+0x51c>
                                    a[i] = rand() % 280;
                                    b[i] = rand() % distance_jumped;
                                }
                            }
                        }
                        else if(blob_y + 1 == b[i]) {
    101c:	e2820001 	add	r0, r2, #1
    1020:	e1510000 	cmp	r1, r0
    1024:	1a00001f 	bne	10a8 <main+0x33c>
                            offset = 1;
                            //stop decrementing
                            decr = 0;
                            //count resets to 0 if button is pressed
                            count = 0;
                            distance_jumped = (init_pos_y - blob_y)/5;
    1028:	e59d3018 	ldr	r3, [sp, #24]
    102c:	e0622003 	rsb	r2, r2, r3
    1030:	e59d0010 	ldr	r0, [sp, #16]
    1034:	e0c80290 	smull	r0, r8, r0, r2
    1038:	e1a02fc2 	asr	r2, r2, #31
    103c:	e06280c8 	rsb	r8, r2, r8, asr #1
    1040:	e1c88fc8 	bic	r8, r8, r8, asr #31
    1044:	e28d5020 	add	r5, sp, #32
    1048:	e3a04000 	mov	r4, #0
                                if((b[i] + distance_jumped) < 210) {
                                    b[i] += distance_jumped;
                                }
                                else {
                                    //else replace it with one on the top
                                    a[i] = rand() % 280;
    104c:	e3a0af46 	mov	r10, #280	; 0x118
                            }
                            
                            //reloads platforms
                            for(i = 0; i < 20; i++) {
                                //if the platform shifted down is within the vertical range, do it
                                if((b[i] + distance_jumped) < 210) {
    1050:	e4953004 	ldr	r3, [r5], #4
    1054:	e0833008 	add	r3, r3, r8
    1058:	e35300d1 	cmp	r3, #209	; 0xd1
                                    b[i] += distance_jumped;
    105c:	d5053004 	strle	r3, [r5, #-4]
                            }
                            
                            //reloads platforms
                            for(i = 0; i < 20; i++) {
                                //if the platform shifted down is within the vertical range, do it
                                if((b[i] + distance_jumped) < 210) {
    1060:	da00000b 	ble	1094 <main+0x328>
                                    b[i] += distance_jumped;
                                }
                                else {
                                    //else replace it with one on the top
                                    a[i] = rand() % 280;
    1064:	eb000131 	bl	1530 <rand>
    1068:	e0c2109b 	smull	r1, r2, r11, r0
    106c:	e0822000 	add	r2, r2, r0
    1070:	e1a03fc0 	asr	r3, r0, #31
    1074:	e0633442 	rsb	r3, r3, r2, asr #8
    1078:	e060039a 	mls	r0, r10, r3, r0
    107c:	e28d3084 	add	r3, sp, #132	; 0x84
    1080:	e7840003 	str	r0, [r4, r3]
                                    b[i] = rand() % distance_jumped;
    1084:	eb000129 	bl	1530 <rand>
    1088:	e1a01008 	mov	r1, r8
    108c:	eb000102 	bl	149c <__aeabi_idivmod>
    1090:	e5051004 	str	r1, [r5, #-4]
    1094:	e2844004 	add	r4, r4, #4
                            if(distance_jumped < 0) {
                                distance_jumped = 0;
                            }
                            
                            //reloads platforms
                            for(i = 0; i < 20; i++) {
    1098:	e3540050 	cmp	r4, #80	; 0x50
    109c:	1affffeb 	bne	1050 <main+0x2e4>
                                    b[i] = rand() % distance_jumped;
                                }
                            }
                        }
                        else if(blob_y + 1 == b[i]) {
                            offset = 1;
    10a0:	e3a04001 	mov	r4, #1
    10a4:	ea000077 	b	1288 <main+0x51c>
                                    a[i] = rand() % 280;
                                    b[i] = rand() % distance_jumped;
                                }
                            }
                        }
                        else if(blob_y + 2 == b[i]) {
    10a8:	e2820002 	add	r0, r2, #2
    10ac:	e1510000 	cmp	r1, r0
    10b0:	1a000026 	bne	1150 <main+0x3e4>
                            offset = 2;
                            //stop decrementing
                            decr = 0;
                            //count resets to 0 if button is pressed
                            count = 0;
                            distance_jumped = (init_pos_y - blob_y)/5;
    10b4:	e59d3018 	ldr	r3, [sp, #24]
    10b8:	e0622003 	rsb	r2, r2, r3
    10bc:	e59d0010 	ldr	r0, [sp, #16]
    10c0:	e0c80290 	smull	r0, r8, r0, r2
    10c4:	e1a02fc2 	asr	r2, r2, #31
    10c8:	e06280c8 	rsb	r8, r2, r8, asr #1
    10cc:	e28d5020 	add	r5, sp, #32
    10d0:	e3a04000 	mov	r4, #0
                                if((b[i] + distance_jumped) < 210) {
                                    b[i] += distance_jumped;
                                }
                                else {
                                    //else replace it with one on the top
                                    a[i] = rand() % 280;
    10d4:	e3a0af46 	mov	r10, #280	; 0x118
                            distance_jumped = (init_pos_y - blob_y)/5;
                            
                            //reloads platforms
                            for(i = 0; i < 20; i++) {
                                //if the platform shifted down is within the vertical range, do it
                                if((b[i] + distance_jumped) < 210) {
    10d8:	e4953004 	ldr	r3, [r5], #4
    10dc:	e0833008 	add	r3, r3, r8
    10e0:	e35300d1 	cmp	r3, #209	; 0xd1
                                    b[i] += distance_jumped;
    10e4:	d5053004 	strle	r3, [r5, #-4]
                            distance_jumped = (init_pos_y - blob_y)/5;
                            
                            //reloads platforms
                            for(i = 0; i < 20; i++) {
                                //if the platform shifted down is within the vertical range, do it
                                if((b[i] + distance_jumped) < 210) {
    10e8:	da00000b 	ble	111c <main+0x3b0>
                                    b[i] += distance_jumped;
                                }
                                else {
                                    //else replace it with one on the top
                                    a[i] = rand() % 280;
    10ec:	eb00010f 	bl	1530 <rand>
    10f0:	e0c2109b 	smull	r1, r2, r11, r0
    10f4:	e0822000 	add	r2, r2, r0
    10f8:	e1a03fc0 	asr	r3, r0, #31
    10fc:	e0633442 	rsb	r3, r3, r2, asr #8
    1100:	e060039a 	mls	r0, r10, r3, r0
    1104:	e28d3084 	add	r3, sp, #132	; 0x84
    1108:	e7840003 	str	r0, [r4, r3]
                                    b[i] = rand() % distance_jumped;
    110c:	eb000107 	bl	1530 <rand>
    1110:	e1a01008 	mov	r1, r8
    1114:	eb0000e0 	bl	149c <__aeabi_idivmod>
    1118:	e5051004 	str	r1, [r5, #-4]
    111c:	e2844004 	add	r4, r4, #4
                            //count resets to 0 if button is pressed
                            count = 0;
                            distance_jumped = (init_pos_y - blob_y)/5;
                            
                            //reloads platforms
                            for(i = 0; i < 20; i++) {
    1120:	e3540050 	cmp	r4, #80	; 0x50
    1124:	1affffeb 	bne	10d8 <main+0x36c>
                                    b[i] = rand() % distance_jumped;
                                }
                            }
                        }
                        else if(blob_y + 2 == b[i]) {
                            offset = 2;
    1128:	e3a04002 	mov	r4, #2
    112c:	ea000055 	b	1288 <main+0x51c>
            }
            else if(count > 50 && count <= 150) {
 
                for(i = 0; i < 20; i++) {
                    //check if same y as platform
                    if(((blob_x + 23) >= a[i]) && (blob_x + 14 <= (a[i] + 40))) {
    1130:	e1a00004 	mov	r0, r4
    1134:	e1a01009 	mov	r1, r9
    1138:	e1a0200a 	mov	r2, r10
    113c:	ea000006 	b	115c <main+0x3f0>
    1140:	e1a00004 	mov	r0, r4
    1144:	e1a01009 	mov	r1, r9
    1148:	e1a0200a 	mov	r2, r10
    114c:	ea000002 	b	115c <main+0x3f0>
                                    a[i] = rand() % 280;
                                    b[i] = rand() % distance_jumped;
                                }
                            }
                        }
                        else if(blob_y + 2 == b[i]) {
    1150:	e1a00004 	mov	r0, r4
    1154:	e1a01009 	mov	r1, r9
    1158:	e1a0200a 	mov	r2, r10
                }
                draw_blob(blob_x + 14,blob_y - 15, 0x13220);
            }
            else if(count > 50 && count <= 150) {
 
                for(i = 0; i < 20; i++) {
    115c:	e2833001 	add	r3, r3, #1
    1160:	e3530013 	cmp	r3, #19
    1164:	daffff79 	ble	f50 <main+0x1e4>
    1168:	e1a05004 	mov	r5, r4
    116c:	e1a03009 	mov	r3, r9
                                }
                            }
                        }
                    }
                }
                count = move_blob(&blob_x, &blob_y, count, decr);
    1170:	e59d0008 	ldr	r0, [sp, #8]
    1174:	e2871008 	add	r1, r7, #8
    1178:	e1a0200a 	mov	r2, r10
    117c:	ebfffc4f 	bl	2c0 <move_blob>
    1180:	e1a0a000 	mov	r10, r0
                if(count == 65) {
    1184:	e3500041 	cmp	r0, #65	; 0x41
                     decr=-2;
    1188:	03e09001 	mvneq	r9, #1
                            }
                        }
                    }
                }
                count = move_blob(&blob_x, &blob_y, count, decr);
                if(count == 65) {
    118c:	0a000002 	beq	119c <main+0x430>
                     decr=-2;
                }
                if(count == 95) {
                     decr=-3;
    1190:	e350005f 	cmp	r0, #95	; 0x5f
    1194:	03e09002 	mvneq	r9, #2
    1198:	eaffffff 	b	119c <main+0x430>
                }
                //stop by checking every time if it has touched a platform
                
                draw_blob(blob_x + 14,blob_y - 15 - offset, 0x13220);
    119c:	e5970004 	ldr	r0, [r7, #4]
    11a0:	e5971008 	ldr	r1, [r7, #8]
    11a4:	e241100f 	sub	r1, r1, #15
    11a8:	e280000e 	add	r0, r0, #14
    11ac:	e0651001 	rsb	r1, r5, r1
    11b0:	e59d200c 	ldr	r2, [sp, #12]
    11b4:	ebfffc56 	bl	314 <draw_blob>
            }
            //if the blob falls through the bottom
            if(blob_y > 239) {
    11b8:	e5973008 	ldr	r3, [r7, #8]
    11bc:	e35300ef 	cmp	r3, #239	; 0xef
    11c0:	ca00002a 	bgt	1270 <main+0x504>
                lose = true;
            }
            else if(blob_y < 20) {
    11c4:	e3530013 	cmp	r3, #19
    11c8:	ca000022 	bgt	1258 <main+0x4ec>
                //passes the top
                distance_jumped = 180;
                blob_y += 180;
    11cc:	e28330b4 	add	r3, r3, #180	; 0xb4
    11d0:	e5873008 	str	r3, [r7, #8]
    11d4:	e28d8020 	add	r8, sp, #32
    11d8:	e3a05000 	mov	r5, #0
                        b[i] += distance_jumped;
                    }
                    else {
                        //else replace it with one on the top
                        a[i] = rand() % 280;
                        b[i] = rand() % distance_jumped;
    11dc:	e58da01c 	str	r10, [sp, #28]
    11e0:	e59da014 	ldr	r10, [sp, #20]
                //passes the top
                distance_jumped = 180;
                blob_y += 180;
                for(i = 0; i < 20; i++) {
                    //if the platform shifted down is within the vertical range, do it
                    if((b[i] + distance_jumped) < 210) {
    11e4:	e4983004 	ldr	r3, [r8], #4
    11e8:	e28330b4 	add	r3, r3, #180	; 0xb4
    11ec:	e35300d1 	cmp	r3, #209	; 0xd1
                        b[i] += distance_jumped;
    11f0:	d5083004 	strle	r3, [r8, #-4]
                //passes the top
                distance_jumped = 180;
                blob_y += 180;
                for(i = 0; i < 20; i++) {
                    //if the platform shifted down is within the vertical range, do it
                    if((b[i] + distance_jumped) < 210) {
    11f4:	da000010 	ble	123c <main+0x4d0>
                        b[i] += distance_jumped;
                    }
                    else {
                        //else replace it with one on the top
                        a[i] = rand() % 280;
    11f8:	eb0000cc 	bl	1530 <rand>
    11fc:	e0c2309b 	smull	r3, r2, r11, r0
    1200:	e0822000 	add	r2, r2, r0
    1204:	e1a03fc0 	asr	r3, r0, #31
    1208:	e0633442 	rsb	r3, r3, r2, asr #8
    120c:	e3a01f46 	mov	r1, #280	; 0x118
    1210:	e0600391 	mls	r0, r1, r3, r0
    1214:	e28d3084 	add	r3, sp, #132	; 0x84
    1218:	e7850003 	str	r0, [r5, r3]
                        b[i] = rand() % distance_jumped;
    121c:	eb0000c3 	bl	1530 <rand>
    1220:	e0c2309a 	smull	r3, r2, r10, r0
    1224:	e0822000 	add	r2, r2, r0
    1228:	e1a03fc0 	asr	r3, r0, #31
    122c:	e06333c2 	rsb	r3, r3, r2, asr #7
    1230:	e3a010b4 	mov	r1, #180	; 0xb4
    1234:	e0600391 	mls	r0, r1, r3, r0
    1238:	e5080004 	str	r0, [r8, #-4]
    123c:	e2855004 	add	r5, r5, #4
            }
            else if(blob_y < 20) {
                //passes the top
                distance_jumped = 180;
                blob_y += 180;
                for(i = 0; i < 20; i++) {
    1240:	e3550050 	cmp	r5, #80	; 0x50
    1244:	1affffe6 	bne	11e4 <main+0x478>
    1248:	e59da01c 	ldr	r10, [sp, #28]
                        //else replace it with one on the top
                        a[i] = rand() % 280;
                        b[i] = rand() % distance_jumped;
                    }
                }
                score++;
    124c:	e59d2004 	ldr	r2, [sp, #4]
    1250:	e2822001 	add	r2, r2, #1
    1254:	e58d2004 	str	r2, [sp, #4]
            }
            wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    1258:	ebfffbff 	bl	25c <wait_for_vsync>
            pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    125c:	e3033fff 	movw	r3, #16383	; 0x3fff
    1260:	e34f3f20 	movt	r3, #65312	; 0xff20
    1264:	e5133fdb 	ldr	r3, [r3, #-4059]	; 0xfffff025
    1268:	e5873000 	str	r3, [r7]
    126c:	eaffff10 	b	eb4 <main+0x148>
                        b[i] = rand() % distance_jumped;
                    }
                }
                score++;
            }
            wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    1270:	ebfffbf9 	bl	25c <wait_for_vsync>
            pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    1274:	e3033fff 	movw	r3, #16383	; 0x3fff
    1278:	e34f3f20 	movt	r3, #65312	; 0xff20
    127c:	e5133fdb 	ldr	r3, [r3, #-4059]	; 0xfffff025
    1280:	e5873000 	str	r3, [r7]
    1284:	eafffef6 	b	e64 <main+0xf8>
                }
                draw_blob(blob_x + 14,blob_y - 15, 0x13220);
            }
            else if(count > 50 && count <= 150) {
 
                for(i = 0; i < 20; i++) {
    1288:	e1a05004 	mov	r5, r4
    128c:	e3a09000 	mov	r9, #0
    1290:	e1a03009 	mov	r3, r9
    1294:	e1a0a009 	mov	r10, r9
    1298:	eaffffb4 	b	1170 <main+0x404>

0000129c <pushbutton_ISR>:
 * Pushbutton - Interrupt Service Routine
 *
 * This routine checks which KEY has been pressed. It writes to HEX0
 *******************************************************************/
void pushbutton_ISR( void )
{
    129c:	e92d4008 	push	{r3, lr}
    /* KEY base address */
    volatile int *KEY_ptr = (int *) 0xFF200050;
    /* HEX display base address */
    volatile int *HEX3_HEX0_ptr = (int *) 0xFF200020;
    int press, HEX_bits;
    press = *(KEY_ptr + 3); // read the pushbutton interrupt register
    12a0:	e3a02000 	mov	r2, #0
    12a4:	e34f2f20 	movt	r2, #65312	; 0xff20
    12a8:	e592305c 	ldr	r3, [r2, #92]	; 0x5c
    *(KEY_ptr + 3) = press; // Clear the interrupt
    12ac:	e582305c 	str	r3, [r2, #92]	; 0x5c
    if (press & 0x1) { // KEY0
    12b0:	e3130001 	tst	r3, #1
    12b4:	0a000006 	beq	12d4 <pushbutton_ISR+0x38>
        //key0 should make the blob move right
        move_blob_right(&blob_x, &blob_y);
    12b8:	e3011e0c 	movw	r1, #7692	; 0x1e0c
    12bc:	e3401000 	movt	r1, #0
    12c0:	e2810004 	add	r0, r1, #4
    12c4:	e2811008 	add	r1, r1, #8
    12c8:	ebfffc05 	bl	2e4 <move_blob_right>
        HEX_bits = 0b00111111;
    12cc:	e3a0203f 	mov	r2, #63	; 0x3f
    12d0:	ea000017 	b	1334 <pushbutton_ISR+0x98>
    }
    else if (press & 0x2) { // KEY1
    12d4:	e3130002 	tst	r3, #2
    12d8:	0a000006 	beq	12f8 <pushbutton_ISR+0x5c>
        //key1 should make the blob move left
        move_blob_left(&blob_x, &blob_y);
    12dc:	e3011e0c 	movw	r1, #7692	; 0x1e0c
    12e0:	e3401000 	movt	r1, #0
    12e4:	e2810004 	add	r0, r1, #4
    12e8:	e2811008 	add	r1, r1, #8
    12ec:	ebfffbf8 	bl	2d4 <move_blob_left>
        HEX_bits = 0b00000110;
    12f0:	e3a02006 	mov	r2, #6
    12f4:	ea00000e 	b	1334 <pushbutton_ISR+0x98>
    }
    else if (press & 0x4) {// KEY2
    12f8:	e3130004 	tst	r3, #4
    12fc:	0a000006 	beq	131c <pushbutton_ISR+0x80>
        move_blob_right_more(&blob_x, &blob_y);
    1300:	e3011e0c 	movw	r1, #7692	; 0x1e0c
    1304:	e3401000 	movt	r1, #0
    1308:	e2810004 	add	r0, r1, #4
    130c:	e2811008 	add	r1, r1, #8
    1310:	ebfffbfb 	bl	304 <move_blob_right_more>
        HEX_bits = 0b01011011;
    1314:	e3a0205b 	mov	r2, #91	; 0x5b
    1318:	ea000005 	b	1334 <pushbutton_ISR+0x98>
    }
    else {// press & 0x8, which is KEY3
        move_blob_left_more(&blob_x, &blob_y);
    131c:	e3011e0c 	movw	r1, #7692	; 0x1e0c
    1320:	e3401000 	movt	r1, #0
    1324:	e2810004 	add	r0, r1, #4
    1328:	e2811008 	add	r1, r1, #8
    132c:	ebfffbf0 	bl	2f4 <move_blob_left_more>
        HEX_bits = 0b01001111;
    1330:	e3a0204f 	mov	r2, #79	; 0x4f
    }
    *HEX3_HEX0_ptr = HEX_bits;
    1334:	e3a03000 	mov	r3, #0
    1338:	e34f3f20 	movt	r3, #65312	; 0xff20
    133c:	e5832020 	str	r2, [r3, #32]
    1340:	e8bd8008 	pop	{r3, pc}

00001344 <__cs3_isr_irq>:
    *(KEY_ptr + 2) = 0xF; // enable interrupts for all four KEYs
}

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq (void)
{
    1344:	e24ee004 	sub	lr, lr, #4
    1348:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
    // Read the ICCIAR from the CPU Interface in the GIC
    int interrupt_ID = *((int *) 0xFFFEC10C);
    134c:	e3e03a13 	mvn	r3, #77824	; 0x13000
    if (interrupt_ID == 73) // check if interrupt is from the KEYs
    1350:	e5133ef3 	ldr	r3, [r3, #-3827]	; 0xfffff10d
    1354:	e3530049 	cmp	r3, #73	; 0x49
    1358:	1a000004 	bne	1370 <__cs3_isr_irq+0x2c>
        pushbutton_ISR ();
    135c:	ebffffce 	bl	129c <pushbutton_ISR>
    else
        while (1); // if unexpected, then stay here
    // Write to the End of Interrupt Register (ICCEOIR)
    *((int *) 0xFFFEC110) = interrupt_ID;
    1360:	e3a02049 	mov	r2, #73	; 0x49
    1364:	e3e03a13 	mvn	r3, #77824	; 0x13000
    1368:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
    136c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^
    1370:	eafffffe 	b	1370 <__cs3_isr_irq+0x2c>

00001374 <__aeabi_idiv>:
    1374:	e3510000 	cmp	r1, #0
    1378:	0a000043 	beq	148c <.divsi3_skip_div0_test+0x110>

0000137c <.divsi3_skip_div0_test>:
    137c:	e020c001 	eor	r12, r0, r1
    1380:	42611000 	rsbmi	r1, r1, #0
    1384:	e2512001 	subs	r2, r1, #1
    1388:	0a000027 	beq	142c <.divsi3_skip_div0_test+0xb0>
    138c:	e1b03000 	movs	r3, r0
    1390:	42603000 	rsbmi	r3, r0, #0
    1394:	e1530001 	cmp	r3, r1
    1398:	9a000026 	bls	1438 <.divsi3_skip_div0_test+0xbc>
    139c:	e1110002 	tst	r1, r2
    13a0:	0a000028 	beq	1448 <.divsi3_skip_div0_test+0xcc>
    13a4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    13a8:	01a01181 	lsleq	r1, r1, #3
    13ac:	03a02008 	moveq	r2, #8
    13b0:	13a02001 	movne	r2, #1
    13b4:	e3510201 	cmp	r1, #268435456	; 0x10000000
    13b8:	31510003 	cmpcc	r1, r3
    13bc:	31a01201 	lslcc	r1, r1, #4
    13c0:	31a02202 	lslcc	r2, r2, #4
    13c4:	3afffffa 	bcc	13b4 <.divsi3_skip_div0_test+0x38>
    13c8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    13cc:	31510003 	cmpcc	r1, r3
    13d0:	31a01081 	lslcc	r1, r1, #1
    13d4:	31a02082 	lslcc	r2, r2, #1
    13d8:	3afffffa 	bcc	13c8 <.divsi3_skip_div0_test+0x4c>
    13dc:	e3a00000 	mov	r0, #0
    13e0:	e1530001 	cmp	r3, r1
    13e4:	20433001 	subcs	r3, r3, r1
    13e8:	21800002 	orrcs	r0, r0, r2
    13ec:	e15300a1 	cmp	r3, r1, lsr #1
    13f0:	204330a1 	subcs	r3, r3, r1, lsr #1
    13f4:	218000a2 	orrcs	r0, r0, r2, lsr #1
    13f8:	e1530121 	cmp	r3, r1, lsr #2
    13fc:	20433121 	subcs	r3, r3, r1, lsr #2
    1400:	21800122 	orrcs	r0, r0, r2, lsr #2
    1404:	e15301a1 	cmp	r3, r1, lsr #3
    1408:	204331a1 	subcs	r3, r3, r1, lsr #3
    140c:	218001a2 	orrcs	r0, r0, r2, lsr #3
    1410:	e3530000 	cmp	r3, #0
    1414:	11b02222 	lsrsne	r2, r2, #4
    1418:	11a01221 	lsrne	r1, r1, #4
    141c:	1affffef 	bne	13e0 <.divsi3_skip_div0_test+0x64>
    1420:	e35c0000 	cmp	r12, #0
    1424:	42600000 	rsbmi	r0, r0, #0
    1428:	e12fff1e 	bx	lr
    142c:	e13c0000 	teq	r12, r0
    1430:	42600000 	rsbmi	r0, r0, #0
    1434:	e12fff1e 	bx	lr
    1438:	33a00000 	movcc	r0, #0
    143c:	01a00fcc 	asreq	r0, r12, #31
    1440:	03800001 	orreq	r0, r0, #1
    1444:	e12fff1e 	bx	lr
    1448:	e3510801 	cmp	r1, #65536	; 0x10000
    144c:	21a01821 	lsrcs	r1, r1, #16
    1450:	23a02010 	movcs	r2, #16
    1454:	33a02000 	movcc	r2, #0
    1458:	e3510c01 	cmp	r1, #256	; 0x100
    145c:	21a01421 	lsrcs	r1, r1, #8
    1460:	22822008 	addcs	r2, r2, #8
    1464:	e3510010 	cmp	r1, #16
    1468:	21a01221 	lsrcs	r1, r1, #4
    146c:	22822004 	addcs	r2, r2, #4
    1470:	e3510004 	cmp	r1, #4
    1474:	82822003 	addhi	r2, r2, #3
    1478:	908220a1 	addls	r2, r2, r1, lsr #1
    147c:	e35c0000 	cmp	r12, #0
    1480:	e1a00233 	lsr	r0, r3, r2
    1484:	42600000 	rsbmi	r0, r0, #0
    1488:	e12fff1e 	bx	lr
    148c:	e3500000 	cmp	r0, #0
    1490:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    1494:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    1498:	ea000007 	b	14bc <__aeabi_idiv0>

0000149c <__aeabi_idivmod>:
    149c:	e3510000 	cmp	r1, #0
    14a0:	0afffff9 	beq	148c <.divsi3_skip_div0_test+0x110>
    14a4:	e92d4003 	push	{r0, r1, lr}
    14a8:	ebffffb3 	bl	137c <.divsi3_skip_div0_test>
    14ac:	e8bd4006 	pop	{r1, r2, lr}
    14b0:	e0030092 	mul	r3, r2, r0
    14b4:	e0411003 	sub	r1, r1, r3
    14b8:	e12fff1e 	bx	lr

000014bc <__aeabi_idiv0>:
    14bc:	e12fff1e 	bx	lr

000014c0 <atexit>:
    14c0:	e1a01000 	mov	r1, r0
    14c4:	e3a00000 	mov	r0, #0
    14c8:	e92d4008 	push	{r3, lr}
    14cc:	e1a02000 	mov	r2, r0
    14d0:	e1a03000 	mov	r3, r0
    14d4:	eb00002c 	bl	158c <__register_exitproc>
    14d8:	e8bd4008 	pop	{r3, lr}
    14dc:	e12fff1e 	bx	lr

000014e0 <exit>:
    14e0:	e92d4008 	push	{r3, lr}
    14e4:	e3a01000 	mov	r1, #0
    14e8:	e1a04000 	mov	r4, r0
    14ec:	eb000063 	bl	1680 <__call_exitprocs>
    14f0:	e59f3018 	ldr	r3, [pc, #24]	; 1510 <exit+0x30>
    14f4:	e5930000 	ldr	r0, [r3]
    14f8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    14fc:	e3530000 	cmp	r3, #0
    1500:	11a0e00f 	movne	lr, pc
    1504:	112fff13 	bxne	r3
    1508:	e1a00004 	mov	r0, r4
    150c:	eb0000e7 	bl	18b0 <_exit>
    1510:	00001958 	.word	0x00001958

00001514 <srand>:
    1514:	e59f3010 	ldr	r3, [pc, #16]	; 152c <srand+0x18>
    1518:	e5933000 	ldr	r3, [r3]
    151c:	e3a02000 	mov	r2, #0
    1520:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    1524:	e58320ac 	str	r2, [r3, #172]	; 0xac
    1528:	e12fff1e 	bx	lr
    152c:	000019b8 	.word	0x000019b8

00001530 <rand>:
    1530:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    1534:	e59f3044 	ldr	r3, [pc, #68]	; 1580 <rand+0x50>
    1538:	e593c000 	ldr	r12, [r3]
    153c:	e59f4040 	ldr	r4, [pc, #64]	; 1584 <rand+0x54>
    1540:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    1544:	e0040492 	mul	r4, r2, r4
    1548:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    154c:	e59f3034 	ldr	r3, [pc, #52]	; 1588 <rand+0x58>
    1550:	e0244193 	mla	r4, r3, r1, r4
    1554:	e0810392 	umull	r0, r1, r2, r3
    1558:	e3a02001 	mov	r2, #1
    155c:	e0922000 	adds	r2, r2, r0
    1560:	e0841001 	add	r1, r4, r1
    1564:	e3a03000 	mov	r3, #0
    1568:	e0a33001 	adc	r3, r3, r1
    156c:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    1570:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    1574:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    1578:	e8bd0010 	ldmfd	sp!, {r4}
    157c:	e12fff1e 	bx	lr
    1580:	000019b8 	.word	0x000019b8
    1584:	5851f42d 	.word	0x5851f42d
    1588:	4c957f2d 	.word	0x4c957f2d

0000158c <__register_exitproc>:
    158c:	e59fc0e4 	ldr	r12, [pc, #228]	; 1678 <__register_exitproc+0xec>
    1590:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1594:	e59c4000 	ldr	r4, [r12]
    1598:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    159c:	e35c0000 	cmp	r12, #0
    15a0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    15a4:	e59c5004 	ldr	r5, [r12, #4]
    15a8:	0584c148 	streq	r12, [r4, #328]	; 0x148
    15ac:	e355001f 	cmp	r5, #31
    15b0:	e24dd010 	sub	sp, sp, #16
    15b4:	e1a06000 	mov	r6, r0
    15b8:	da000015 	ble	1614 <__register_exitproc+0x88>
    15bc:	e59f00b8 	ldr	r0, [pc, #184]	; 167c <__register_exitproc+0xf0>
    15c0:	e3500000 	cmp	r0, #0
    15c4:	1a000001 	bne	15d0 <__register_exitproc+0x44>
    15c8:	e3e00000 	mvn	r0, #0
    15cc:	ea000018 	b	1634 <__register_exitproc+0xa8>
    15d0:	e3a00e19 	mov	r0, #400	; 0x190
    15d4:	e58d100c 	str	r1, [sp, #12]
    15d8:	e58d2008 	str	r2, [sp, #8]
    15dc:	e58d3004 	str	r3, [sp, #4]
    15e0:	e320f000 	nop	{0}
    15e4:	e250c000 	subs	r12, r0, #0
    15e8:	e59d100c 	ldr	r1, [sp, #12]
    15ec:	e59d2008 	ldr	r2, [sp, #8]
    15f0:	e59d3004 	ldr	r3, [sp, #4]
    15f4:	0afffff3 	beq	15c8 <__register_exitproc+0x3c>
    15f8:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    15fc:	e3a00000 	mov	r0, #0
    1600:	e58c0004 	str	r0, [r12, #4]
    1604:	e58c5000 	str	r5, [r12]
    1608:	e584c148 	str	r12, [r4, #328]	; 0x148
    160c:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1610:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1614:	e3560000 	cmp	r6, #0
    1618:	e59c4004 	ldr	r4, [r12, #4]
    161c:	1a000007 	bne	1640 <__register_exitproc+0xb4>
    1620:	e2843002 	add	r3, r4, #2
    1624:	e2844001 	add	r4, r4, #1
    1628:	e78c1103 	str	r1, [r12, r3, lsl #2]
    162c:	e58c4004 	str	r4, [r12, #4]
    1630:	e3a00000 	mov	r0, #0
    1634:	e28dd010 	add	sp, sp, #16
    1638:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    163c:	e12fff1e 	bx	lr
    1640:	e3a00001 	mov	r0, #1
    1644:	e1a00410 	lsl	r0, r0, r4
    1648:	e08c8104 	add	r8, r12, r4, lsl #2
    164c:	e3560002 	cmp	r6, #2
    1650:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1654:	e5883108 	str	r3, [r8, #264]	; 0x108
    1658:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    165c:	e1877000 	orr	r7, r7, r0
    1660:	01830000 	orreq	r0, r3, r0
    1664:	e1a05008 	mov	r5, r8
    1668:	e5882088 	str	r2, [r8, #136]	; 0x88
    166c:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1670:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1674:	eaffffe9 	b	1620 <__register_exitproc+0x94>
    1678:	00001958 	.word	0x00001958
    167c:	00000000 	.word	0x00000000

00001680 <__call_exitprocs>:
    1680:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1684:	e59f3168 	ldr	r3, [pc, #360]	; 17f4 <__call_exitprocs+0x174>
    1688:	e5933000 	ldr	r3, [r3]
    168c:	e24dd014 	sub	sp, sp, #20
    1690:	e58d3004 	str	r3, [sp, #4]
    1694:	e2833f52 	add	r3, r3, #328	; 0x148
    1698:	e58d0008 	str	r0, [sp, #8]
    169c:	e58d300c 	str	r3, [sp, #12]
    16a0:	e1a07001 	mov	r7, r1
    16a4:	e3a08001 	mov	r8, #1
    16a8:	e59d3004 	ldr	r3, [sp, #4]
    16ac:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    16b0:	e3560000 	cmp	r6, #0
    16b4:	e59db00c 	ldr	r11, [sp, #12]
    16b8:	0a000033 	beq	178c <__call_exitprocs+0x10c>
    16bc:	e5965004 	ldr	r5, [r6, #4]
    16c0:	e2554001 	subs	r4, r5, #1
    16c4:	5286a088 	addpl	r10, r6, #136	; 0x88
    16c8:	5285501f 	addpl	r5, r5, #31
    16cc:	508a5105 	addpl	r5, r10, r5, lsl #2
    16d0:	5a000007 	bpl	16f4 <__call_exitprocs+0x74>
    16d4:	ea000029 	b	1780 <__call_exitprocs+0x100>
    16d8:	e5953000 	ldr	r3, [r5]
    16dc:	e1530007 	cmp	r3, r7
    16e0:	0a000005 	beq	16fc <__call_exitprocs+0x7c>
    16e4:	e2444001 	sub	r4, r4, #1
    16e8:	e3740001 	cmn	r4, #1
    16ec:	e2455004 	sub	r5, r5, #4
    16f0:	0a000022 	beq	1780 <__call_exitprocs+0x100>
    16f4:	e3570000 	cmp	r7, #0
    16f8:	1afffff6 	bne	16d8 <__call_exitprocs+0x58>
    16fc:	e5963004 	ldr	r3, [r6, #4]
    1700:	e06a2005 	rsb	r2, r10, r5
    1704:	e2433001 	sub	r3, r3, #1
    1708:	e0862002 	add	r2, r6, r2
    170c:	e1530004 	cmp	r3, r4
    1710:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1714:	13a01000 	movne	r1, #0
    1718:	05864004 	streq	r4, [r6, #4]
    171c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1720:	e3530000 	cmp	r3, #0
    1724:	0affffee 	beq	16e4 <__call_exitprocs+0x64>
    1728:	e1a02418 	lsl	r2, r8, r4
    172c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1730:	e1120001 	tst	r2, r1
    1734:	e5969004 	ldr	r9, [r6, #4]
    1738:	0a000016 	beq	1798 <__call_exitprocs+0x118>
    173c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1740:	e1120001 	tst	r2, r1
    1744:	1a000016 	bne	17a4 <__call_exitprocs+0x124>
    1748:	e59d0008 	ldr	r0, [sp, #8]
    174c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1750:	e1a0e00f 	mov	lr, pc
    1754:	e12fff13 	bx	r3
    1758:	e5963004 	ldr	r3, [r6, #4]
    175c:	e1530009 	cmp	r3, r9
    1760:	1affffd0 	bne	16a8 <__call_exitprocs+0x28>
    1764:	e59b3000 	ldr	r3, [r11]
    1768:	e1530006 	cmp	r3, r6
    176c:	1affffcd 	bne	16a8 <__call_exitprocs+0x28>
    1770:	e2444001 	sub	r4, r4, #1
    1774:	e3740001 	cmn	r4, #1
    1778:	e2455004 	sub	r5, r5, #4
    177c:	1affffdc 	bne	16f4 <__call_exitprocs+0x74>
    1780:	e59f1070 	ldr	r1, [pc, #112]	; 17f8 <__call_exitprocs+0x178>
    1784:	e3510000 	cmp	r1, #0
    1788:	1a000009 	bne	17b4 <__call_exitprocs+0x134>
    178c:	e28dd014 	add	sp, sp, #20
    1790:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1794:	e12fff1e 	bx	lr
    1798:	e1a0e00f 	mov	lr, pc
    179c:	e12fff13 	bx	r3
    17a0:	eaffffec 	b	1758 <__call_exitprocs+0xd8>
    17a4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    17a8:	e1a0e00f 	mov	lr, pc
    17ac:	e12fff13 	bx	r3
    17b0:	eaffffe8 	b	1758 <__call_exitprocs+0xd8>
    17b4:	e5963004 	ldr	r3, [r6, #4]
    17b8:	e3530000 	cmp	r3, #0
    17bc:	e5963000 	ldr	r3, [r6]
    17c0:	1a000008 	bne	17e8 <__call_exitprocs+0x168>
    17c4:	e3530000 	cmp	r3, #0
    17c8:	0a000006 	beq	17e8 <__call_exitprocs+0x168>
    17cc:	e1a00006 	mov	r0, r6
    17d0:	e58b3000 	str	r3, [r11]
    17d4:	e320f000 	nop	{0}
    17d8:	e59b6000 	ldr	r6, [r11]
    17dc:	e3560000 	cmp	r6, #0
    17e0:	1affffb5 	bne	16bc <__call_exitprocs+0x3c>
    17e4:	eaffffe8 	b	178c <__call_exitprocs+0x10c>
    17e8:	e1a0b006 	mov	r11, r6
    17ec:	e1a06003 	mov	r6, r3
    17f0:	eafffff9 	b	17dc <__call_exitprocs+0x15c>
    17f4:	00001958 	.word	0x00001958
    17f8:	00000000 	.word	0x00000000

000017fc <register_fini>:
    17fc:	e92d4008 	push	{r3, lr}
    1800:	e59f3010 	ldr	r3, [pc, #16]	; 1818 <register_fini+0x1c>
    1804:	e3530000 	cmp	r3, #0
    1808:	159f000c 	ldrne	r0, [pc, #12]	; 181c <register_fini+0x20>
    180c:	1bffff2b 	blne	14c0 <atexit>
    1810:	e8bd4008 	pop	{r3, lr}
    1814:	e12fff1e 	bx	lr
    1818:	00001980 	.word	0x00001980
    181c:	00001820 	.word	0x00001820

00001820 <__libc_fini_array>:
    1820:	e92d4038 	push	{r3, r4, r5, lr}
    1824:	e59f5030 	ldr	r5, [pc, #48]	; 185c <__libc_fini_array+0x3c>
    1828:	e59f4030 	ldr	r4, [pc, #48]	; 1860 <__libc_fini_array+0x40>
    182c:	e0654004 	rsb	r4, r5, r4
    1830:	e1b04144 	asrs	r4, r4, #2
    1834:	10855104 	addne	r5, r5, r4, lsl #2
    1838:	0a000004 	beq	1850 <__libc_fini_array+0x30>
    183c:	e5353004 	ldr	r3, [r5, #-4]!
    1840:	e1a0e00f 	mov	lr, pc
    1844:	e12fff13 	bx	r3
    1848:	e2544001 	subs	r4, r4, #1
    184c:	1afffffa 	bne	183c <__libc_fini_array+0x1c>
    1850:	eb00004a 	bl	1980 <__libc_fini>
    1854:	e8bd4038 	pop	{r3, r4, r5, lr}
    1858:	e12fff1e 	bx	lr
    185c:	00001998 	.word	0x00001998
    1860:	0000199c 	.word	0x0000199c

00001864 <__cs3_premain>:
    1864:	e92d4008 	push	{r3, lr}
    1868:	eb000017 	bl	18cc <__libc_init_array>
    186c:	e59f3030 	ldr	r3, [pc, #48]	; 18a4 <__cs3_premain+0x40>
    1870:	e3530000 	cmp	r3, #0
    1874:	15930000 	ldrne	r0, [r3]
    1878:	01a00003 	moveq	r0, r3
    187c:	e59f3024 	ldr	r3, [pc, #36]	; 18a8 <__cs3_premain+0x44>
    1880:	e3530000 	cmp	r3, #0
    1884:	15931000 	ldrne	r1, [r3]
    1888:	01a01003 	moveq	r1, r3
    188c:	e3a02000 	mov	r2, #0
    1890:	ebfffd35 	bl	d6c <main>
    1894:	e59f3010 	ldr	r3, [pc, #16]	; 18ac <__cs3_premain+0x48>
    1898:	e3530000 	cmp	r3, #0
    189c:	1bffff0f 	blne	14e0 <exit>
    18a0:	eafffffe 	b	18a0 <__cs3_premain+0x3c>
	...
    18ac:	000014e0 	.word	0x000014e0

000018b0 <_exit>:
    18b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    18b4:	e3a00018 	mov	r0, #24
    18b8:	e59f1004 	ldr	r1, [pc, #4]	; 18c4 <_exit+0x14>
    18bc:	ef123456 	svc	0x00123456
    18c0:	eafffffe 	b	18c0 <_exit+0x10>
    18c4:	00020026 	.word	0x00020026

000018c8 <__cs3_isr_interrupt>:
    18c8:	eafffffe 	b	18c8 <__cs3_isr_interrupt>

000018cc <__libc_init_array>:
    18cc:	e92d4070 	push	{r4, r5, r6, lr}
    18d0:	e59f506c 	ldr	r5, [pc, #108]	; 1944 <__libc_init_array+0x78>
    18d4:	e59f606c 	ldr	r6, [pc, #108]	; 1948 <__libc_init_array+0x7c>
    18d8:	e0656006 	rsb	r6, r5, r6
    18dc:	e1b06146 	asrs	r6, r6, #2
    18e0:	12455004 	subne	r5, r5, #4
    18e4:	13a04000 	movne	r4, #0
    18e8:	0a000005 	beq	1904 <__libc_init_array+0x38>
    18ec:	e5b53004 	ldr	r3, [r5, #4]!
    18f0:	e2844001 	add	r4, r4, #1
    18f4:	e1a0e00f 	mov	lr, pc
    18f8:	e12fff13 	bx	r3
    18fc:	e1560004 	cmp	r6, r4
    1900:	1afffff9 	bne	18ec <__libc_init_array+0x20>
    1904:	e59f5040 	ldr	r5, [pc, #64]	; 194c <__libc_init_array+0x80>
    1908:	e59f6040 	ldr	r6, [pc, #64]	; 1950 <__libc_init_array+0x84>
    190c:	e0656006 	rsb	r6, r5, r6
    1910:	eb000012 	bl	1960 <_init>
    1914:	e1b06146 	asrs	r6, r6, #2
    1918:	12455004 	subne	r5, r5, #4
    191c:	13a04000 	movne	r4, #0
    1920:	0a000005 	beq	193c <__libc_init_array+0x70>
    1924:	e5b53004 	ldr	r3, [r5, #4]!
    1928:	e2844001 	add	r4, r4, #1
    192c:	e1a0e00f 	mov	lr, pc
    1930:	e12fff13 	bx	r3
    1934:	e1560004 	cmp	r6, r4
    1938:	1afffff9 	bne	1924 <__libc_init_array+0x58>
    193c:	e8bd4070 	pop	{r4, r5, r6, lr}
    1940:	e12fff1e 	bx	lr
    1944:	00001978 	.word	0x00001978
    1948:	00001978 	.word	0x00001978
    194c:	00001978 	.word	0x00001978
    1950:	00001980 	.word	0x00001980

Disassembly of section .rodata:

00001958 <_global_impure_ptr>:
    1958:	000019c0 00000043                       ....C...

00001960 <_init>:
    1960:	e1a0c00d 	mov	r12, sp
    1964:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1968:	e24cb004 	sub	r11, r12, #4
    196c:	e24bd028 	sub	sp, r11, #40	; 0x28
    1970:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1974:	e12fff1e 	bx	lr

00001978 <__init_array_start>:
    1978:	000017fc 	.word	0x000017fc

0000197c <__frame_dummy_init_array_entry>:
    197c:	00000208                                ....

00001980 <__libc_fini>:
    1980:	e1a0c00d 	mov	r12, sp
    1984:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1988:	e24cb004 	sub	r11, r12, #4
    198c:	e24bd028 	sub	sp, r11, #40	; 0x28
    1990:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1994:	e12fff1e 	bx	lr

00001998 <__fini_array_start>:
    1998:	000001c4 	.word	0x000001c4

0000199c <__cs3_regions>:
    199c:	00000000 	.word	0x00000000
    19a0:	00000040 	.word	0x00000040
    19a4:	00000040 	.word	0x00000040
    19a8:	00001db0 	.word	0x00001db0
    19ac:	00000028 	.word	0x00000028
